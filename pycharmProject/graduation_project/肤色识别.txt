# #########BGR空间的手势识别#########
# def skin_mask(roi):
#     rgb = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)  # 转换到RGB空间
#     (R, G, B) = cv2.split(rgb)  # 获取图像每个像素点的RGB的值，即将一个二维矩阵拆成三个二维矩阵
#     skin = np.zeros(R.shape, dtype=np.uint8)  # 掩膜
#     (x, y) = R.shape  # 获取图像的像素点的坐标范围
#     for i in range(0, x):
#         for j in range(0, y):
#             # 判断条件，不在肤色范围内则将掩膜设为黑色，即255
#             if (abs(int(R[i][j]) - int(G[i][j])) > 15) and (int(R[i][j]) > int(G[i][j])) \
#                     and (int(R[i][j]) > int(B[i][j])):
#                 if (R[i][j] > 95) and (G[i][j] > 40) and (B[i][j] > 20) \
#                         and (max(R[i][j], G[i][j], B[i][j]) - min(R[i][j], G[i][j], B[i][j]) > 15):
#                     skin[i][j] = 255
#                 elif (R[i][j] > 220) and (G[i][j] > 210) and (B[i][j] > 170):
#                     skin[i][j] = 255
#     # res = cv2.bitwise_and(roi, roi, mask=skin)  # 图像与运算
#
#     kernel = np.ones((5, 5), np.uint8)
#     dilation = cv2.dilate(skin, kernel)  # 膨胀操作
#     res = cv2.bitwise_and(roi, roi, mask=dilation)  # 图像与运算
#     return res


# ########椭圆肤色检测模型##########
# def skin_mask(roi):
#     # skinCrCbHist = np.zeros((256, 256), dtype=np.uint8)
#     # cv2.ellipse(skinCrCbHist, (113, 155), (23, 25), 43, 0, 360, (255, 255, 255), -1)  # 绘制椭圆弧线
#     # YCrCb = cv2.cvtColor(roi, cv2.COLOR_BGR2YCR_CB)  # 转换至YCrCb空间
#     # (y, Cr, Cb) = cv2.split(YCrCb)  # 拆分出Y,Cr,Cb值
#     # skin = np.zeros(Cr.shape, dtype=np.uint8)  # 掩膜
#     # (x, y) = Cr.shape
#     # for i in range(0, x):
#     #     for j in range(0, y):
#     #         if skinCrCbHist[Cr[i][j], Cb[i][j]] > 0:  # 若不在椭圆区间中
#     #             skin[i][j] = 255
#     # res = cv2.bitwise_and(roi, roi, mask=skin)
#
#     YCrCb = cv2.cvtColor(roi, cv2.COLOR_BGR2YCR_CB)  # 转换至YCrCb空间
#     (y, cr, cb) = cv2.split(YCrCb)  # 拆分出Y,Cr,Cb值
#     skin = np.zeros(cr.shape, dtype=np.uint8)
#     (x, y) = cr.shape
#     for i in range(0, x):
#         for j in range(0, y):
#             # 每个像素点进行判断
#             if (cr[i][j] > 130) and (cr[i][j] < 175) and (cb[i][j] > 77) and (cb[i][j] < 127):
#                 skin[i][j] = 255
#     res = cv2.bitwise_and(roi, roi, mask=skin)
#
#     return res