var $root=protobuf.get("onnx");$root.onnx={},$root.onnx.Version={_START_VERSION:0,IR_VERSION_2017_10_10:1,IR_VERSION_2017_10_30:2,IR_VERSION_2017_11_3:3,IR_VERSION_2019_1_22:4,IR_VERSION_2019_3_18:5,IR_VERSION_2019_9_19:6,IR_VERSION:7},$root.onnx.AttributeProto=class{constructor(){this.floats=[],this.ints=[],this.strings=[],this.tensors=[],this.graphs=[],this.sparse_tensors=[]}static decode(e,n){const t=new $root.onnx.AttributeProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.name=e.string();break;case 21:t.ref_attr_name=e.string();break;case 13:t.doc_string=e.string();break;case 20:t.type=e.int32();break;case 2:t.f=e.float();break;case 3:t.i=e.int64();break;case 4:t.s=e.bytes();break;case 5:t.t=$root.onnx.TensorProto.decode(e,e.uint32());break;case 6:t.g=$root.onnx.GraphProto.decode(e,e.uint32());break;case 22:t.sparse_tensor=$root.onnx.SparseTensorProto.decode(e,e.uint32());break;case 7:t.floats=e.floats(t.floats,r);break;case 8:t.ints=e.array(t.ints,()=>e.int64(),r);break;case 9:t.strings.push(e.bytes());break;case 10:t.tensors.push($root.onnx.TensorProto.decode(e,e.uint32()));break;case 11:t.graphs.push($root.onnx.GraphProto.decode(e,e.uint32()));break;case 23:t.sparse_tensors.push($root.onnx.SparseTensorProto.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.AttributeProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"name":n.name=e.string();break;case"ref_attr_name":n.ref_attr_name=e.string();break;case"doc_string":n.doc_string=e.string();break;case"type":n.type=e.enum($root.onnx.AttributeProto.AttributeType);break;case"f":n.f=e.float();break;case"i":n.i=e.integer();break;case"s":n.s=e.bytes();break;case"t":n.t=$root.onnx.TensorProto.decodeText(e,!0);break;case"g":n.g=$root.onnx.GraphProto.decodeText(e,!0);break;case"sparse_tensor":n.sparse_tensor=$root.onnx.SparseTensorProto.decodeText(e,!0);break;case"floats":e.array(n.floats,()=>e.float());break;case"ints":e.array(n.ints,()=>e.integer());break;case"strings":e.array(n.strings,()=>e.bytes());break;case"tensors":n.tensors.push($root.onnx.TensorProto.decodeText(e,!0));break;case"graphs":n.graphs.push($root.onnx.GraphProto.decodeText(e,!0));break;case"sparse_tensors":n.sparse_tensors.push($root.onnx.SparseTensorProto.decodeText(e,!0));break;default:e.field(t,n)}}return n}},$root.onnx.AttributeProto.prototype.name="",$root.onnx.AttributeProto.prototype.ref_attr_name="",$root.onnx.AttributeProto.prototype.doc_string="",$root.onnx.AttributeProto.prototype.type=0,$root.onnx.AttributeProto.prototype.f=0,$root.onnx.AttributeProto.prototype.i=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.AttributeProto.prototype.s=new Uint8Array([]),$root.onnx.AttributeProto.prototype.t=null,$root.onnx.AttributeProto.prototype.g=null,$root.onnx.AttributeProto.prototype.sparse_tensor=null,$root.onnx.AttributeProto.AttributeType={UNDEFINED:0,FLOAT:1,INT:2,STRING:3,TENSOR:4,GRAPH:5,SPARSE_TENSOR:11,FLOATS:6,INTS:7,STRINGS:8,TENSORS:9,GRAPHS:10,SPARSE_TENSORS:12},$root.onnx.ValueInfoProto=class{constructor(){}static decode(e,n){const t=new $root.onnx.ValueInfoProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.name=e.string();break;case 2:t.type=$root.onnx.TypeProto.decode(e,e.uint32());break;case 3:t.doc_string=e.string();break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.ValueInfoProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"name":n.name=e.string();break;case"type":n.type=$root.onnx.TypeProto.decodeText(e,!0);break;case"doc_string":n.doc_string=e.string();break;default:e.field(t,n)}}return n}},$root.onnx.ValueInfoProto.prototype.name="",$root.onnx.ValueInfoProto.prototype.type=null,$root.onnx.ValueInfoProto.prototype.doc_string="",$root.onnx.NodeProto=class{constructor(){this.input=[],this.output=[],this.attribute=[]}static decode(e,n){const t=new $root.onnx.NodeProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.input.push(e.string());break;case 2:t.output.push(e.string());break;case 3:t.name=e.string();break;case 4:t.op_type=e.string();break;case 7:t.domain=e.string();break;case 5:t.attribute.push($root.onnx.AttributeProto.decode(e,e.uint32()));break;case 6:t.doc_string=e.string();break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.NodeProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"input":e.array(n.input,()=>e.string());break;case"output":e.array(n.output,()=>e.string());break;case"name":n.name=e.string();break;case"op_type":n.op_type=e.string();break;case"domain":n.domain=e.string();break;case"attribute":n.attribute.push($root.onnx.AttributeProto.decodeText(e,!0));break;case"doc_string":n.doc_string=e.string();break;default:e.field(t,n)}}return n}},$root.onnx.NodeProto.prototype.name="",$root.onnx.NodeProto.prototype.op_type="",$root.onnx.NodeProto.prototype.domain="",$root.onnx.NodeProto.prototype.doc_string="",$root.onnx.TrainingInfoProto=class{constructor(){this.initialization_binding=[],this.update_binding=[]}static decode(e,n){const t=new $root.onnx.TrainingInfoProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.initialization=$root.onnx.GraphProto.decode(e,e.uint32());break;case 2:t.algorithm=$root.onnx.GraphProto.decode(e,e.uint32());break;case 3:t.initialization_binding.push($root.onnx.StringStringEntryProto.decode(e,e.uint32()));break;case 4:t.update_binding.push($root.onnx.StringStringEntryProto.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TrainingInfoProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"initialization":n.initialization=$root.onnx.GraphProto.decodeText(e,!0);break;case"algorithm":n.algorithm=$root.onnx.GraphProto.decodeText(e,!0);break;case"initialization_binding":n.initialization_binding.push($root.onnx.StringStringEntryProto.decodeText(e,!0));break;case"update_binding":n.update_binding.push($root.onnx.StringStringEntryProto.decodeText(e,!0));break;default:e.field(t,n)}}return n}},$root.onnx.TrainingInfoProto.prototype.initialization=null,$root.onnx.TrainingInfoProto.prototype.algorithm=null,$root.onnx.ModelProto=class{constructor(){this.opset_import=[],this.metadata_props=[],this.training_info=[]}static decode(e,n){const t=new $root.onnx.ModelProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.ir_version=e.int64();break;case 8:t.opset_import.push($root.onnx.OperatorSetIdProto.decode(e,e.uint32()));break;case 2:t.producer_name=e.string();break;case 3:t.producer_version=e.string();break;case 4:t.domain=e.string();break;case 5:t.model_version=e.int64();break;case 6:t.doc_string=e.string();break;case 7:t.graph=$root.onnx.GraphProto.decode(e,e.uint32());break;case 14:t.metadata_props.push($root.onnx.StringStringEntryProto.decode(e,e.uint32()));break;case 20:t.training_info.push($root.onnx.TrainingInfoProto.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.ModelProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"ir_version":n.ir_version=e.integer();break;case"opset_import":n.opset_import.push($root.onnx.OperatorSetIdProto.decodeText(e,!0));break;case"producer_name":n.producer_name=e.string();break;case"producer_version":n.producer_version=e.string();break;case"domain":n.domain=e.string();break;case"model_version":n.model_version=e.integer();break;case"doc_string":n.doc_string=e.string();break;case"graph":n.graph=$root.onnx.GraphProto.decodeText(e,!0);break;case"metadata_props":n.metadata_props.push($root.onnx.StringStringEntryProto.decodeText(e,!0));break;case"training_info":n.training_info.push($root.onnx.TrainingInfoProto.decodeText(e,!0));break;default:e.field(t,n)}}return n}},$root.onnx.ModelProto.prototype.ir_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.ModelProto.prototype.producer_name="",$root.onnx.ModelProto.prototype.producer_version="",$root.onnx.ModelProto.prototype.domain="",$root.onnx.ModelProto.prototype.model_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.ModelProto.prototype.doc_string="",$root.onnx.ModelProto.prototype.graph=null,$root.onnx.StringStringEntryProto=class{constructor(){}static decode(e,n){const t=new $root.onnx.StringStringEntryProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.key=e.string();break;case 2:t.value=e.string();break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.StringStringEntryProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"key":n.key=e.string();break;case"value":n.value=e.string();break;default:e.field(t,n)}}return n}},$root.onnx.StringStringEntryProto.prototype.key="",$root.onnx.StringStringEntryProto.prototype.value="",$root.onnx.TensorAnnotation=class{constructor(){this.quant_parameter_tensor_names=[]}static decode(e,n){const t=new $root.onnx.TensorAnnotation,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.tensor_name=e.string();break;case 2:t.quant_parameter_tensor_names.push($root.onnx.StringStringEntryProto.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TensorAnnotation;for(e.start();!e.end();){const t=e.tag();switch(t){case"tensor_name":n.tensor_name=e.string();break;case"quant_parameter_tensor_names":n.quant_parameter_tensor_names.push($root.onnx.StringStringEntryProto.decodeText(e,!0));break;default:e.field(t,n)}}return n}},$root.onnx.TensorAnnotation.prototype.tensor_name="",$root.onnx.GraphProto=class{constructor(){this.node=[],this.initializer=[],this.sparse_initializer=[],this.input=[],this.output=[],this.value_info=[],this.quantization_annotation=[]}static decode(e,n){const t=new $root.onnx.GraphProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.node.push($root.onnx.NodeProto.decode(e,e.uint32()));break;case 2:t.name=e.string();break;case 5:t.initializer.push($root.onnx.TensorProto.decode(e,e.uint32()));break;case 15:t.sparse_initializer.push($root.onnx.SparseTensorProto.decode(e,e.uint32()));break;case 10:t.doc_string=e.string();break;case 11:t.input.push($root.onnx.ValueInfoProto.decode(e,e.uint32()));break;case 12:t.output.push($root.onnx.ValueInfoProto.decode(e,e.uint32()));break;case 13:t.value_info.push($root.onnx.ValueInfoProto.decode(e,e.uint32()));break;case 14:t.quantization_annotation.push($root.onnx.TensorAnnotation.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.GraphProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"node":n.node.push($root.onnx.NodeProto.decodeText(e,!0));break;case"name":n.name=e.string();break;case"initializer":n.initializer.push($root.onnx.TensorProto.decodeText(e,!0));break;case"sparse_initializer":n.sparse_initializer.push($root.onnx.SparseTensorProto.decodeText(e,!0));break;case"doc_string":n.doc_string=e.string();break;case"input":n.input.push($root.onnx.ValueInfoProto.decodeText(e,!0));break;case"output":n.output.push($root.onnx.ValueInfoProto.decodeText(e,!0));break;case"value_info":n.value_info.push($root.onnx.ValueInfoProto.decodeText(e,!0));break;case"quantization_annotation":n.quantization_annotation.push($root.onnx.TensorAnnotation.decodeText(e,!0));break;default:e.field(t,n)}}return n}},$root.onnx.GraphProto.prototype.name="",$root.onnx.GraphProto.prototype.doc_string="",$root.onnx.TensorProto=class{constructor(){this.dims=[],this.float_data=[],this.int32_data=[],this.string_data=[],this.int64_data=[],this.external_data=[],this.double_data=[],this.uint64_data=[]}static decode(e,n){const t=new $root.onnx.TensorProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.dims=e.array(t.dims,()=>e.int64(),r);break;case 2:t.data_type=e.int32();break;case 3:t.segment=$root.onnx.TensorProto.Segment.decode(e,e.uint32());break;case 4:t.float_data=e.floats(t.float_data,r);break;case 5:t.int32_data=e.array(t.int32_data,()=>e.int32(),r);break;case 6:t.string_data.push(e.bytes());break;case 7:t.int64_data=e.array(t.int64_data,()=>e.int64(),r);break;case 8:t.name=e.string();break;case 12:t.doc_string=e.string();break;case 9:t.raw_data=e.bytes();break;case 13:t.external_data.push($root.onnx.StringStringEntryProto.decode(e,e.uint32()));break;case 14:t.data_location=e.int32();break;case 10:t.double_data=e.doubles(t.double_data,r);break;case 11:t.uint64_data=e.array(t.uint64_data,()=>e.uint64(),r);break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TensorProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"dims":e.array(n.dims,()=>e.integer());break;case"data_type":n.data_type=e.integer();break;case"segment":n.segment=$root.onnx.TensorProto.Segment.decodeText(e,!0);break;case"float_data":e.array(n.float_data,()=>e.float());break;case"int32_data":e.array(n.int32_data,()=>e.integer());break;case"string_data":e.array(n.string_data,()=>e.bytes());break;case"int64_data":e.array(n.int64_data,()=>e.integer());break;case"name":n.name=e.string();break;case"doc_string":n.doc_string=e.string();break;case"raw_data":n.raw_data=e.bytes();break;case"external_data":n.external_data.push($root.onnx.StringStringEntryProto.decodeText(e,!0));break;case"data_location":n.data_location=e.enum($root.onnx.TensorProto.DataLocation);break;case"double_data":e.array(n.double_data,()=>e.float());break;case"uint64_data":e.array(n.uint64_data,()=>e.integer());break;default:e.field(t,n)}}return n}},$root.onnx.TensorProto.prototype.data_type=0,$root.onnx.TensorProto.prototype.segment=null,$root.onnx.TensorProto.prototype.name="",$root.onnx.TensorProto.prototype.doc_string="",$root.onnx.TensorProto.prototype.raw_data=new Uint8Array([]),$root.onnx.TensorProto.prototype.data_location=0,$root.onnx.TensorProto.DataType={UNDEFINED:0,FLOAT:1,UINT8:2,INT8:3,UINT16:4,INT16:5,INT32:6,INT64:7,STRING:8,BOOL:9,FLOAT16:10,DOUBLE:11,UINT32:12,UINT64:13,COMPLEX64:14,COMPLEX128:15,BFLOAT16:16},$root.onnx.TensorProto.Segment=class{constructor(){}static decode(e,n){const t=new $root.onnx.TensorProto.Segment,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.begin=e.int64();break;case 2:t.end=e.int64();break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TensorProto.Segment;for(e.start();!e.end();){const t=e.tag();switch(t){case"begin":n.begin=e.integer();break;case"end":n.end=e.integer();break;default:e.field(t,n)}}return n}},$root.onnx.TensorProto.Segment.prototype.begin=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.TensorProto.Segment.prototype.end=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.TensorProto.DataLocation={DEFAULT:0,EXTERNAL:1},$root.onnx.SparseTensorProto=class{constructor(){this.dims=[]}static decode(e,n){const t=new $root.onnx.SparseTensorProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.values=$root.onnx.TensorProto.decode(e,e.uint32());break;case 2:t.indices=$root.onnx.TensorProto.decode(e,e.uint32());break;case 3:t.dims=e.array(t.dims,()=>e.int64(),r);break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.SparseTensorProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"values":n.values=$root.onnx.TensorProto.decodeText(e,!0);break;case"indices":n.indices=$root.onnx.TensorProto.decodeText(e,!0);break;case"dims":e.array(n.dims,()=>e.integer());break;default:e.field(t,n)}}return n}},$root.onnx.SparseTensorProto.prototype.values=null,$root.onnx.SparseTensorProto.prototype.indices=null,$root.onnx.TensorShapeProto=class{constructor(){this.dim=[]}static decode(e,n){const t=new $root.onnx.TensorShapeProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.dim.push($root.onnx.TensorShapeProto.Dimension.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TensorShapeProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"dim":n.dim.push($root.onnx.TensorShapeProto.Dimension.decodeText(e,!0));break;default:e.field(t,n)}}return n}},$root.onnx.TensorShapeProto.Dimension=class{constructor(){}get value(){return $root.onnx.TensorShapeProto.Dimension.valueSet=$root.onnx.TensorShapeProto.Dimension.valueSet||new Set(["dim_value","dim_param"]),Object.keys(this).find(e=>$root.onnx.TensorShapeProto.Dimension.valueSet.has(e)&&this[e]!=null)}static decode(e,n){const t=new $root.onnx.TensorShapeProto.Dimension,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.dim_value=e.int64();break;case 2:t.dim_param=e.string();break;case 3:t.denotation=e.string();break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TensorShapeProto.Dimension;for(e.start();!e.end();){const t=e.tag();switch(t){case"dim_value":n.dim_value=e.integer();break;case"dim_param":n.dim_param=e.string();break;case"denotation":n.denotation=e.string();break;default:e.field(t,n)}}return n}},$root.onnx.TensorShapeProto.Dimension.prototype.denotation="",$root.onnx.TypeProto=class{constructor(){}get value(){return $root.onnx.TypeProto.valueSet=$root.onnx.TypeProto.valueSet||new Set(["tensor_type","sequence_type","map_type","sparse_tensor_type","opaque_type"]),Object.keys(this).find(e=>$root.onnx.TypeProto.valueSet.has(e)&&this[e]!=null)}static decode(e,n){const t=new $root.onnx.TypeProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.tensor_type=$root.onnx.TypeProto.Tensor.decode(e,e.uint32());break;case 4:t.sequence_type=$root.onnx.TypeProto.Sequence.decode(e,e.uint32());break;case 5:t.map_type=$root.onnx.TypeProto.Map.decode(e,e.uint32());break;case 8:t.sparse_tensor_type=$root.onnx.TypeProto.SparseTensor.decode(e,e.uint32());break;case 7:t.opaque_type=$root.onnx.TypeProto.Opaque.decode(e,e.uint32());break;case 6:t.denotation=e.string();break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TypeProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"tensor_type":n.tensor_type=$root.onnx.TypeProto.Tensor.decodeText(e,!0);break;case"sequence_type":n.sequence_type=$root.onnx.TypeProto.Sequence.decodeText(e,!0);break;case"map_type":n.map_type=$root.onnx.TypeProto.Map.decodeText(e,!0);break;case"sparse_tensor_type":n.sparse_tensor_type=$root.onnx.TypeProto.SparseTensor.decodeText(e,!0);break;case"opaque_type":n.opaque_type=$root.onnx.TypeProto.Opaque.decodeText(e,!0);break;case"denotation":n.denotation=e.string();break;default:e.field(t,n)}}return n}},$root.onnx.TypeProto.prototype.denotation="",$root.onnx.TypeProto.Tensor=class{constructor(){}static decode(e,n){const t=new $root.onnx.TypeProto.Tensor,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.elem_type=e.int32();break;case 2:t.shape=$root.onnx.TensorShapeProto.decode(e,e.uint32());break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TypeProto.Tensor;for(e.start();!e.end();){const t=e.tag();switch(t){case"elem_type":n.elem_type=e.integer();break;case"shape":n.shape=$root.onnx.TensorShapeProto.decodeText(e,!0);break;default:e.field(t,n)}}return n}},$root.onnx.TypeProto.Tensor.prototype.elem_type=0,$root.onnx.TypeProto.Tensor.prototype.shape=null,$root.onnx.TypeProto.Sequence=class{constructor(){}static decode(e,n){const t=new $root.onnx.TypeProto.Sequence,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.elem_type=$root.onnx.TypeProto.decode(e,e.uint32());break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TypeProto.Sequence;for(e.start();!e.end();){const t=e.tag();switch(t){case"elem_type":n.elem_type=$root.onnx.TypeProto.decodeText(e,!0);break;default:e.field(t,n)}}return n}},$root.onnx.TypeProto.Sequence.prototype.elem_type=null,$root.onnx.TypeProto.Map=class{constructor(){}static decode(e,n){const t=new $root.onnx.TypeProto.Map,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.key_type=e.int32();break;case 2:t.value_type=$root.onnx.TypeProto.decode(e,e.uint32());break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TypeProto.Map;for(e.start();!e.end();){const t=e.tag();switch(t){case"key_type":n.key_type=e.integer();break;case"value_type":n.value_type=$root.onnx.TypeProto.decodeText(e,!0);break;default:e.field(t,n)}}return n}},$root.onnx.TypeProto.Map.prototype.key_type=0,$root.onnx.TypeProto.Map.prototype.value_type=null,$root.onnx.TypeProto.SparseTensor=class{constructor(){}static decode(e,n){const t=new $root.onnx.TypeProto.SparseTensor,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.elem_type=e.int32();break;case 2:t.shape=$root.onnx.TensorShapeProto.decode(e,e.uint32());break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TypeProto.SparseTensor;for(e.start();!e.end();){const t=e.tag();switch(t){case"elem_type":n.elem_type=e.integer();break;case"shape":n.shape=$root.onnx.TensorShapeProto.decodeText(e,!0);break;default:e.field(t,n)}}return n}},$root.onnx.TypeProto.SparseTensor.prototype.elem_type=0,$root.onnx.TypeProto.SparseTensor.prototype.shape=null,$root.onnx.TypeProto.Opaque=class{constructor(){}static decode(e,n){const t=new $root.onnx.TypeProto.Opaque,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.domain=e.string();break;case 2:t.name=e.string();break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.TypeProto.Opaque;for(e.start();!e.end();){const t=e.tag();switch(t){case"domain":n.domain=e.string();break;case"name":n.name=e.string();break;default:e.field(t,n)}}return n}},$root.onnx.TypeProto.Opaque.prototype.domain="",$root.onnx.TypeProto.Opaque.prototype.name="",$root.onnx.OperatorSetIdProto=class{constructor(){}static decode(e,n){const t=new $root.onnx.OperatorSetIdProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.domain=e.string();break;case 2:t.version=e.int64();break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.OperatorSetIdProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"domain":n.domain=e.string();break;case"version":n.version=e.integer();break;default:e.field(t,n)}}return n}},$root.onnx.OperatorSetIdProto.prototype.domain="",$root.onnx.OperatorSetIdProto.prototype.version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.OperatorStatus={EXPERIMENTAL:0,STABLE:1},$root.onnx.FunctionProto=class{constructor(){this.input=[],this.output=[],this.attribute=[],this.node=[],this.opset_import=[]}static decode(e,n){const t=new $root.onnx.FunctionProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.name=e.string();break;case 2:t.since_version=e.int64();break;case 3:t.status=e.int32();break;case 4:t.input.push(e.string());break;case 5:t.output.push(e.string());break;case 6:t.attribute.push(e.string());break;case 7:t.node.push($root.onnx.NodeProto.decode(e,e.uint32()));break;case 8:t.doc_string=e.string();break;case 9:t.opset_import.push($root.onnx.OperatorSetIdProto.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.FunctionProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"name":n.name=e.string();break;case"since_version":n.since_version=e.integer();break;case"status":n.status=e.enum($root.onnx.OperatorStatus);break;case"input":e.array(n.input,()=>e.string());break;case"output":e.array(n.output,()=>e.string());break;case"attribute":e.array(n.attribute,()=>e.string());break;case"node":n.node.push($root.onnx.NodeProto.decodeText(e,!0));break;case"doc_string":n.doc_string=e.string();break;case"opset_import":n.opset_import.push($root.onnx.OperatorSetIdProto.decodeText(e,!0));break;default:e.field(t,n)}}return n}},$root.onnx.FunctionProto.prototype.name="",$root.onnx.FunctionProto.prototype.since_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.FunctionProto.prototype.status=0,$root.onnx.FunctionProto.prototype.doc_string="",$root.onnx.OperatorProto=class{constructor(){}static decode(e,n){const t=new $root.onnx.OperatorProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.op_type=e.string();break;case 2:t.since_version=e.int64();break;case 3:t.status=e.int32();break;case 10:t.doc_string=e.string();break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.OperatorProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"op_type":n.op_type=e.string();break;case"since_version":n.since_version=e.integer();break;case"status":n.status=e.enum($root.onnx.OperatorStatus);break;case"doc_string":n.doc_string=e.string();break;default:e.field(t,n)}}return n}},$root.onnx.OperatorProto.prototype.op_type="",$root.onnx.OperatorProto.prototype.since_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.OperatorProto.prototype.status=0,$root.onnx.OperatorProto.prototype.doc_string="",$root.onnx.OperatorSetProto=class{constructor(){this.operator=[],this.functions=[]}static decode(e,n){const t=new $root.onnx.OperatorSetProto,o=e.next(n);for(;e.end(o);){const r=e.uint32();switch(r>>>3){case 1:t.magic=e.string();break;case 2:t.ir_version=e.int64();break;case 3:t.ir_version_prerelease=e.string();break;case 7:t.ir_build_metadata=e.string();break;case 4:t.domain=e.string();break;case 5:t.opset_version=e.int64();break;case 6:t.doc_string=e.string();break;case 8:t.operator.push($root.onnx.OperatorProto.decode(e,e.uint32()));break;case 9:t.functions.push($root.onnx.FunctionProto.decode(e,e.uint32()));break;default:e.skipType(7&r)}}return t}static decodeText(e){const n=new $root.onnx.OperatorSetProto;for(e.start();!e.end();){const t=e.tag();switch(t){case"magic":n.magic=e.string();break;case"ir_version":n.ir_version=e.integer();break;case"ir_version_prerelease":n.ir_version_prerelease=e.string();break;case"ir_build_metadata":n.ir_build_metadata=e.string();break;case"domain":n.domain=e.string();break;case"opset_version":n.opset_version=e.integer();break;case"doc_string":n.doc_string=e.string();break;case"operator":n.operator.push($root.onnx.OperatorProto.decodeText(e,!0));break;case"functions":n.functions.push($root.onnx.FunctionProto.decodeText(e,!0));break;default:e.field(t,n)}}return n}},$root.onnx.OperatorSetProto.prototype.magic="",$root.onnx.OperatorSetProto.prototype.ir_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.OperatorSetProto.prototype.ir_version_prerelease="",$root.onnx.OperatorSetProto.prototype.ir_build_metadata="",$root.onnx.OperatorSetProto.prototype.domain="",$root.onnx.OperatorSetProto.prototype.opset_version=protobuf.Long?protobuf.Long.fromBits(0,0,!1):0,$root.onnx.OperatorSetProto.prototype.doc_string="";
