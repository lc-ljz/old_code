var bson={},long=long||{Long:require("long")};bson.Reader=class{constructor(t){this._asciiDecoder=new TextDecoder("ascii"),this._utf8Decoder=new TextDecoder("utf-8"),this._buffer=t,this._position=0,this._view=new DataView(t.buffer,t.byteOffset,t.byteLength)}read(){return this.document()}document(t){const i=this._position,s=this.int32();if(s<5||i+s>this._buffer.length||this._buffer[i+s-1]!=0)throw new bson.Reader("Invalid BSON size.");const r=t?[]:{};let h=0;for(;;){const n=this.byte();if(n==0)break;const o=this.cstring();let e=null;switch(n){case 1:e=this.double();break;case 2:e=this.string();break;case 3:e=this.document(!1);break;case 4:e=this.document(!0);break;case 5:e=this.binary();break;case 8:e=this.boolean();break;case 10:e=null;break;case 16:e=this.int32();break;case 17:e=this.uint64();break;case 18:e=this.int64();break;default:throw new bson.Error("Unknown value type '"+n+"'.")}if(t){if(h!==parseInt(o,10))throw new bson.Error("Invalid array index '"+o+"'.");r.push(e),h++}else r[o]=e}return r}cstring(){const t=this._buffer.indexOf(0,this._position),i=this._asciiDecoder.decode(this._buffer.subarray(this._position,t));return this._position=t+1,i}string(){const t=this.int32()+this._position-1,i=this._utf8Decoder.decode(this._buffer.subarray(this._position,t));if(this._position=t,this.byte()!="0x00")throw new bson.Error("String missing terminal 0.");return i}binary(){const t=this.int32(),i=this.byte(),s=this._buffer.subarray(this._position,this._position+t);switch(this._position+=t,i){case 0:return s;default:throw new bson.Error("Unknown binary subtype '"+i+"'.")}}boolean(){const t=this.byte();switch(t){case 0:return!1;case 1:return!0;default:throw new bson.Error("Invalid boolean value '"+t+"'.")}}byte(){return this._buffer[this._position++]}int32(){const t=this._view.getInt32(this._position,!0);return this._position+=4,t}int64(){const t=this._view.getUint32(this._position,!0),i=this._view.getUint32(this._position+4,!0);return this._position+=8,new long.Long(t,i,!1).toNumber()}uint64(){const t=this._view.getUint32(this._position,!0),i=this._view.getUint32(this._position+4,!0);return this._position+=8,new long.Long(t,i,!0).toNumber()}},bson.Error=class extends Error{constructor(t){super(t),this.name="BSON Error"}},typeof module!="undefined"&&typeof module.exports=="object"&&(module.exports.Reader=bson.Reader);
