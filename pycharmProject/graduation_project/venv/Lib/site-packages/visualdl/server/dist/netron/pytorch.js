var pytorch=pytorch||{},base=base||require("./base"),long=long||{Long:require("long")};pytorch.ModelFactory=class{match(e){const r=e.identifier,i=r.split(".").pop().toLowerCase();return!(["pth","pt","pt1","pkl","bin","model","h5","pb","t7","dms","ckpt","zip"].indexOf(i)===-1&&!r.toLowerCase().endsWith(".tar")||!pytorch.Container.open(e))}open(e,r){const i=e.identifier;return r.require("./pickle").then(s=>r.require("./python").then(t=>pytorch.Metadata.open(r).then(n=>{try{const o=pytorch.Container.open(e,n,s,t,(a,c)=>{const _=a&&a.message?a.message:a.toString();r.exception(new pytorch.Error(_.replace(/\.$/,"")+" in '"+i+"'."),c)});return new pytorch.Model(n,o)}catch(o){r.exception(o,!1);const a=o&&o.message?o.message:o.toString();throw new pytorch.Error(a.replace(/\.$/,"")+" in '"+i+"'.")}})))}},pytorch.Model=class{constructor(e,r){this._format=r.format,this._producer=r.producer||"",this._graphs=[new pytorch.Graph(e,r)]}get format(){return this._format}get graphs(){return this._graphs}},pytorch.Graph=class{constructor(e,r){if(this._nodes=[],this._inputs=[],this._outputs=[],this._groups=!0,this._littleEndian=r.littleEndian,r.format.startsWith("TorchScript ")){this._name=r.name;const i=r.trace(),s=new Map;if(r.data){const t=[r.data];for(;t.length>0;){const n=t.shift();for(const o of Object.keys(n))if(o!=="__module__"&&o!=="__name__"&&o!=="__parent__"){const a=n[o];if(!Array.isArray(a)&&a===Object(a))if(pytorch.Utility.isTensor(a)){const c=a;c.__parent__=n,!c.initializer&&c.storage&&(c.initializer=new pytorch.Tensor(c.name,c,!0)),c.__variable__&&c.__count__===1&&s.set(c.__variable__,c)}else a&&a.__module__&&a.__name__&&(a.__parent__=n,a.__id__||(a.__id__=o),t.push(a))}}}if(i){if(r.inputs)for(const t of r.inputs)this._inputs.push(new pytorch.Parameter(t,!0,[new pytorch.Argument(t,null,null)]));if(r.outputs)for(const t of r.outputs)this._outputs.push(new pytorch.Parameter(t,!0,[new pytorch.Argument(t,null,null)]));if(r.nodes)for(const t of r.nodes){const n={type:t.type,node:t};this._nodes.push(new pytorch.Node(e,"",n,s))}}r.data&&this._loadScriptModule(e,r,r.data,s)}else if(r.data){const i=r.data;this._type=i.__module__&&i.__name__?i.__module__+"."+i.__name__:"";const s="data";this._inputs.push(new pytorch.Parameter(s,!0,[new pytorch.Argument(s,null,null)]));const t=this._loadModule(e,r.data,[],[s]);for(const n of t)this._outputs.push(new pytorch.Parameter(n,!0,[new pytorch.Argument(n,null,null)]))}else if(r.state)for(const i of r.state){const s=i.attributes||[],t=i.states.map(o=>new pytorch.Parameter(o.name,!0,o.arguments.map(a=>{const c=new pytorch.Tensor(a.id,a.value,this._littleEndian);return new pytorch.Argument(a.id,null,c)}))),n={name:i.name,type:i.type||"torch.nn.Module",attributes:s,inputs:t,outputs:[]};this._nodes.push(new pytorch.Node(e,"",n,null))}}_loadModule(e,r,i,s){if(r.__module__&&!r.__module__==="torch.nn.modules.container"&&(!r._modules||r._modules.length==0))return this._createNode(i,"",r,s),[];if(!r._modules)throw new pytorch.Error("Module does not contain modules.");for(const t of r._modules){const n=t[0],o=t[1];if(t&&o)switch(o.__module__+"."+o.__name__){case"torch.nn.modules.container.Sequential":i.push(n),s=this._loadModule(e,o,i,s),i.pop(n);break;case"torchvision.models.densenet._Transition":case"torchvision.models.resnet.Bottleneck":case"torchvision.models.densenet._DenseBlock":case"torchvision.models.densenet._DenseLayer":case"torchvision.models.inception.BasicConv2d":case"torchvision.models.inception.InceptionAux":case"torchvision.models.inception.InceptionA":case"torchvision.models.inception.InceptionB":case"torchvision.models.inception.InceptionC":case"torchvision.models.inception.InceptionD":case"torchvision.models.inception.InceptionE":i.push(n),s=[this._createNode(e,i,n,o,s,this._littleEndian).name],i.pop(n);break;default:s=[this._createNode(e,i,n,o,s).name]}}return s}_createNode(e,r,i,s,t){const n=s.__module__+"."+s.__name__,o=e.type(n);let a=[{name:"input"}];o&&o.inputs&&o.inputs.length>0&&(a=o.inputs.slice());const c=[new pytorch.Parameter(a.shift().name,!0,t.map(d=>new pytorch.Argument(d,null,null)))],_=s._parameters||s._buffers||[];for(const d of _){const v=d[0],h=d[1];let f=!0,g="";if(a.length>0){const b=a.shift();g=b.name,f=b.visible!==!1}if(d&&h&&(h.data||h.storage)){let b=null;h.data?b=new pytorch.Tensor("",h.data,this._littleEndian):h.storage&&(b=new pytorch.Tensor("",h,this._littleEndian)),c.push(new pytorch.Parameter(g||v,f,[new pytorch.Argument("",null,b)]))}}const u=r.join("/"),l=u?u+"/"+i:i,p=[new pytorch.Parameter("output",!0,[new pytorch.Argument(l,null,null)])],C=[];for(const d of Object.keys(s))d.startsWith("_")||C.push({name:d,value:s[d]});const m={name:l,type:n,attributes:C,inputs:c,outputs:p},y=new pytorch.Node(e,u,m,{});return this._nodes.push(y),y}_loadScriptModule(e,r,i,s){if(i){if(pytorch.Graph._getParameters(i).length>0&&!i.__hide__){const n={module:i};this._nodes.push(new pytorch.Node(e,"",n,s))}const t=pytorch.Graph._getSubmodules(i);for(const n of t)this._loadScriptModule(e,r,n,s)}}static _getParameters(e){const r=[];if(e&&e.__module__&&e.__name__){for(const i of Object.keys(e))if(pytorch.Utility.isTensor(e[i])){const s=e[i];s.__id__=i,r.push(s)}}return r}static _getSubmodules(e){const r=[];if(e&&e.__module__&&e.__name__){for(const i of Object.keys(e))if(!i.startsWith("__")){const s=e[i];s&&s.__module__&&s.__name__&&!pytorch.Utility.isTensor(s)&&r.push(s)}}return r}get type(){return this._type}get name(){return this._name}get groups(){return this._groups}get inputs(){return this._inputs}get outputs(){return this._outputs}get nodes(){return this._nodes}},pytorch.Parameter=class{constructor(e,r,i){this._name=e,this._visible=r,this._arguments=i}get name(){return this._name}get visible(){return this._visible}get arguments(){return this._arguments}},pytorch.Argument=class{constructor(e,r,i){if(typeof e!="string")throw new pytorch.Error("Invalid argument identifier '"+JSON.stringify(e)+"'.");this._name=e,this._type=r,this._initializer=i}get name(){return this._name}get type(){return this._initializer?this._initializer.type:this._type}get initializer(){return this._initializer}},pytorch.Node=class{constructor(e,r,i,s){if(this._metadata=e,this._group=r||"",this._name=i.name||"",i.module||i.node){this._attributes=[],this._inputs=[],this._outputs=[];let t=i.module;if(t){this._type="torch.nn.modules.module.Module";for(const n of pytorch.Graph._getParameters(t))this._inputs.push(new pytorch.Parameter(n.__id__,!0,[new pytorch.Argument("",null,n.initializer||null)])),n.__variable__&&this._outputs.push(new pytorch.Parameter(n.__id__,!0,[new pytorch.Argument(n.__variable__,null,null)]))}if(i.node){this._type=i.type;const n=e.type(this._type);t=null;let o=!0,a=0;for(const c of i.node.inputs){for(const _ of c){const u=s.get(_.id);if(u){if(!u.__parent__||t!=null&&t!=u.__parent__){o=!1;break}t=u.__parent__,a++}}if(!o)break}if(t)if(pytorch.Graph._getParameters(t).filter(c=>c.__id__!=="num_batches_tracked").length==a&&o){t.__hide__=!0;for(const c of i.node.inputs)for(const _ of c){const u=s.get(_.id);u&&u.initializer&&(_.initializer=u.initializer)}}else t=null;for(let c=0;c<i.node.inputs.length;c++){let _=c.toString();n&&n.inputs&&n.inputs.length>c&&(_=n.inputs[c].name),this._inputs.push(new pytorch.Parameter(_,!0,i.node.inputs[c].map(u=>new pytorch.Argument(u.id,null,u.initializer||null))))}for(let c=0;c<i.node.outputs.length;c++){let _=c.toString();n&&n.outputs&&n.outputs.length>c&&(_=n.outputs[c].name),this._outputs.push(new pytorch.Parameter(_,!0,i.node.outputs[c].map(u=>new pytorch.Argument(u.id,null,null))))}for(const c of i.node.attributes){const _=c.name,u=c.value,l=e.attribute(this._type,_);this._attributes.push(new pytorch.Attribute(l,_,u))}}if(t&&t.__id__){let n=t;for(this._name=n.__id__;n.__parent__!=null&&(n=n.__parent__,n.__parent__||n.__id__);)this._name=[n.__id__,this._name].join(".")}}else this._type=i.type,this._inputs=i.inputs,this._outputs=i.outputs,this._attributes=i.attributes.map(t=>{const n=e.attribute(this._type,t.name);return new pytorch.Attribute(n,t.name,t.value)})}get name(){return this._name}get group(){return this._group}get type(){const e=this._type.indexOf(":");return e===-1?this._type:this._type.substring(0,e)}get metadata(){return this._metadata.type(this._type)}get function(){return this._type.startsWith("torch.nn.modules.")&&this._type!=="torch.nn.modules.module.Module"}get attributes(){return this._attributes}get inputs(){return this._inputs}get outputs(){return this._outputs}},pytorch.Attribute=class{constructor(e,r,i){if(this._name=r,this._value=i,this._name==="training")return this._visible=!1,void(this._type="boolean");if(i&&i.type)switch(i.type){case"number":case"string":case"boolean":case"id":this._value=i.value}if(e){switch(Object.prototype.hasOwnProperty.call(e,"type")&&(this._type=e.type),this._type){case"boolean":this._value=="False"?this._value=!1:this._value=="True"&&(this._value=!0);break;case"int32":case"int64":typeof this._value!="number"&&typeof this._value=="string"&&(this._value=parseInt(this._value,10));break;case"float32":case"float64":typeof this._value!="number"&&typeof this._value=="string"&&(this._value=parseFloat(this._value));break;case"int32[]":case"int64[]":switch(this._value.type){case"list":this._value=this._value.value.map(s=>{if(s.type==="number"){const t=parseInt(s.value,10);if(!Number.isNaN(s.value-t))return t}return s})}}(Object.prototype.hasOwnProperty.call(e,"visible")&&!e.visible||Object.prototype.hasOwnProperty.call(e,"default")&&(JSON.stringify(e.default)==JSON.stringify(this._value)||Array.isArray(this._value)&&!Array.isArray(e.default)&&this.value.every(s=>s==e.default)))&&(this._visible=!1)}Array.isArray(i)&&i.length>0&&i.every(s=>s&&s.__module__&&s.__module__.startsWith("torch.nn"))&&(this._value="?")}get type(){return this._type}get name(){return this._name}get value(){return this._value}get visible(){return this._visible!=0}},pytorch.Tensor=class{constructor(e,r,i){this._name=e||"",this._type=new pytorch.TensorType(r.storage.dataType,new pytorch.TensorShape(r.size)),this._data=r.storage.data,this._littleEndian=i}get kind(){return"Tensor"}get name(){return this._name}get type(){return this._type}get state(){return this._context().state}get value(){const e=this._context();return e.state?null:(e.limit=Number.MAX_SAFE_INTEGER,this._decode(e,0))}toString(){const e=this._context();if(e.state)return"";e.limit=1e4;const r=this._decode(e,0);return pytorch.Tensor._stringify(r,"","    ")}_context(){const e={state:null,index:0,count:0};if(!this._type.dataType)return e.state="Tensor has no data type.",e;switch(this._type.dataType){case"uint8":case"qint8":case"int8":case"int16":case"int32":case"int64":case"float16":case"float32":case"float64":break;default:return e.state="Tensor data type '"+this._type.dataType+"' is not supported.",e}return this._type.shape?this._data?(e.data=this._data,e.dataType=this._type.dataType,e.dimensions=this._type.shape.dimensions,e.dataView=new DataView(e.data.buffer,e.data.byteOffset,e.data.byteLength),e):(e.state="Tensor data is empty.",e):(e.state="Tensor has no dimensions.",e)}_decode(e,r){const i=[],s=e.dimensions.length==0?[1]:e.dimensions,t=s[r];if(r==s.length-1)for(let n=0;n<t;n++){if(e.count>e.limit)return i.push("..."),i;switch(e.dataType){case"uint8":i.push(e.dataView.getUint8(e.index,this._littleEndian)),e.index++,e.count++;break;case"qint8":case"int8":i.push(e.dataView.getInt8(e.index,this._littleEndian)),e.index++,e.count++;break;case"int16":i.push(e.dataView.getInt16(e.index,this._littleEndian)),e.index+=2,e.count++;break;case"int32":i.push(e.dataView.getInt32(e.index,this._littleEndian)),e.index+=4,e.count++;break;case"int64":i.push(new long.Long(e.dataView.getUint32(e.index,!0),e.dataView.getUint32(e.index+4,!0),!1)),e.index+=8,e.count++;break;case"float16":i.push(e.dataView.getFloat16(e.index,this._littleEndian)),e.index+=2,e.count++;break;case"float32":i.push(e.dataView.getFloat32(e.index,this._littleEndian)),e.index+=4,e.count++;break;case"float64":i.push(e.dataView.getFloat64(e.index,this._littleEndian)),e.index+=8,e.count++}}else for(let n=0;n<t;n++){if(e.count>e.limit)return i.push("..."),i;i.push(this._decode(e,r+1))}return e.dimensions.length==0?i[0]:i}static _stringify(e,r,i){if(Array.isArray(e)){const s=[];s.push(r+"[");const t=e.map(n=>pytorch.Tensor._stringify(n,r+i,i));return t.length>0&&s.push(t.join(`,
`)),s.push(r+"]"),s.join(`
`)}return e&&long.Long.isLong(e)?r+e.toString():typeof e=="string"?r+e:e==1/0?r+"Infinity":e==-1/0?r+"-Infinity":isNaN(e)?r+"NaN":r+e.toString()}},pytorch.TensorType=class{constructor(e,r){this._dataType=e,this._shape=r}get dataType(){return this._dataType}get shape(){return this._shape}toString(){return this._dataType+this._shape.toString()}},pytorch.TensorShape=class{constructor(e){this._dimensions=e||[]}get dimensions(){return this._dimensions}toString(){return this._dimensions&&this._dimensions.length>0?"["+this._dimensions.map(e=>e.toString()).join(",")+"]":""}},pytorch.Metadata=class{static open(e){return pytorch.Metadata._metadata?Promise.resolve(pytorch.Metadata._metadata):e.request(null,"pytorch-metadata.json","utf-8").then(r=>(pytorch.Metadata._metadata=new pytorch.Metadata(r),pytorch.Metadata._metadata)).catch(()=>(pytorch.Metadata._metadata=new pytorch.Metadata(null),pytorch.Metadata._metadata))}constructor(e){if(this._map=new Map,this._attributeCache=new Map,e){const r=JSON.parse(e);if(r)for(const i of r){i.name&&i.schema&&(i.schema.name=i.name,this._map.set(i.name,i.schema));const s=i.name.indexOf(":");if(s!==-1){const t=i.name.substring(0,s);this._map.has(t)||this._map.set(t,[]),this._map.get(t).push(i.name)}}}}type(e){const r=this._map.get(e);return r?Array.isArray(r)?r.map(i=>this._map.get(i)):r:null}attribute(e,r){const i=e+":"+r;if(!this._attributeCache.has(i)){this._attributeCache.set(i,null);const s=this.type(e);if(s){if(s.inputs)for(const t of s.inputs)this._attributeCache.set(e+":"+t.name,t);if(s.attributes)for(const t of s.attributes)this._attributeCache.set(e+":"+t.name,t)}}return this._attributeCache.get(i)}},pytorch.Error=class extends Error{constructor(e){super(e),this.name="Error loading PyTorch model."}},pytorch.Execution=class{constructor(e,r,i){const s=this;this._python=e,this._sources=r,this._exceptionCallback=i,this._utf8Decoder=new TextDecoder("utf-8"),this._unknownNameMap=new Set,this._knownPackageMap=new Set(["torch","torchvision","collections","__builtin__","_codecs","argparse","numpy"]),this._packages=new Map,this._context=new pytorch.Execution.Context,this._context.scope.builtins={},this._context.scope.builtins.type={__module__:"builtins",__name__:"type"},this._context.scope.builtins.module={__module__:"builtins",__name__:"module",__class__:this._context.scope.builtins.type},this._context.scope.builtins.function={__module__:"builtins",__name__:"function",__class__:this._context.scope.builtins.type},this._context.scope.builtins.method={__module__:"builtins",__name__:"method",__class__:this._context.scope.builtins.type},this._context.scope.builtins.dict={__module__:"builtins",__name__:"dict",__class__:this._context.scope.builtins.type},this._context.scope.builtins.list={__module__:"builtins",__name__:"list",__class__:this._context.scope.builtins.type},this._context.scope.builtins.str={__module__:"builtins",__name__:"str",__class__:this._context.scope.builtins.type},this._context.scope.builtins.tuple={__module__:"builtins",__name__:"tuple",__class__:this._context.scope.builtins.type},this._context.scope.typing={__name__:"typing",__class__:this._context.scope.builtins.module},this._context.scope.typing._GenericAlias={__module__:"typing",__name__:"_GenericAlias",__class__:this._context.scope.builtins.type},this._context.scope.typing._SpecialForm={__module__:"typing",__name__:"_SpecialForm",__class__:this._context.scope.builtins.type},this._context.scope.typing._VariadicGenericAlias={__module__:"typing",__name__:"_VariadicGenericAlias",__class__:this._context.scope.builtins.type},this._context.scope.typing.Dict={__module__:"typing",__name__:"Dict",__class__:this._context.scope.typing._VariadicGenericAlias,__origin__:this._context.scope.builtins.dict},this._context.scope.typing.List={__module__:"typing",__name__:"List",__class__:this._context.scope.typing._GenericAlias,__origin__:this._context.scope.builtins.list},this._context.scope.typing.Optional={__module__:"typing",__class__:this._context.scope.typing._SpecialForm},this._context.scope.typing.Tuple={__module__:"typing",__name__:"Tuple",__class__:this._context.scope.typing._GenericAlias,__origin__:this._context.scope.builtins.tuple},this._context.scope.torch={__name__:"torch",__class__:this._context.scope.builtins.module},this._context.scope.torch.Tensor={__module__:"torch",__name__:"Tensor",__class__:this._context.scope.builtins.type},this._registerConstructor("argparse.Namespace",function(t){this.args=t}),this._registerConstructor("torch.autograd.variable.Variable",function(){}),this._registerConstructor("torch.backends.cudnn.rnn.Unserializable",function(){}),this._registerConstructor("torch.device",function(t,n){this.type=t,n&&(this.index=n)}),this._registerConstructor("torch.distributions.multivariate_normal.MultivariateNormal",function(){}),this._registerConstructor("torch.nn.backends.thnn._get_thnn_function_backend",function(){}),this._registerConstructor("torch.nn.intrinsic.modules.fused.ConvReLU2d",function(){}),this._registerConstructor("torch.nn.modules.activation.CELU",function(){}),this._registerConstructor("torch.nn.modules.activation.ELU",function(){}),this._registerConstructor("torch.nn.modules.activation.GELU",function(){}),this._registerConstructor("torch.nn.modules.activation.GLU",function(){}),this._registerConstructor("torch.nn.modules.activation.Hardtanh",function(){}),this._registerConstructor("torch.nn.modules.activation.LeakyReLU",function(){}),this._registerConstructor("torch.nn.modules.activation.LogSigmoid",function(){}),this._registerConstructor("torch.nn.modules.activation.LogSoftmax",function(){}),this._registerConstructor("torch.nn.modules.activation.MultiheadAttention",function(){}),this._registerConstructor("torch.nn.modules.activation.ReLU",function(){}),this._registerConstructor("torch.nn.modules.activation.ReLU6",function(){}),this._registerConstructor("torch.nn.modules.activation.PReLU",function(){}),this._registerConstructor("torch.nn.modules.activation.RReLU",function(){}),this._registerConstructor("torch.nn.modules.activation.SELU",function(){}),this._registerConstructor("torch.nn.modules.activation.Sigmoid",function(){}),this._registerConstructor("torch.nn.modules.activation.Softmax",function(){}),this._registerConstructor("torch.nn.modules.activation.Softmax2d",function(){}),this._registerConstructor("torch.nn.modules.activation.Softplus",function(){}),this._registerConstructor("torch.nn.modules.activation.Tanh",function(){}),this._registerConstructor("torch.nn.modules.activation.Threshold",function(){}),this._registerConstructor("torch.nn.modules.batchnorm.BatchNorm1d",function(){}),this._registerConstructor("torch.nn.modules.batchnorm.BatchNorm2d",function(){}),this._registerConstructor("torch.nn.modules.batchnorm.BatchNorm3d",function(){}),this._registerConstructor("torch.nn.modules.batchnorm.SyncBatchNorm",function(){}),this._registerConstructor("torch.nn.modules.container.ModuleDict",function(){}),this._registerConstructor("torch.nn.modules.container.ModuleList",function(){}),this._registerConstructor("torch.nn.modules.container.ParameterList",function(){}),this._registerConstructor("torch.nn.modules.container.Sequential",function(){}),this._registerConstructor("torch.nn.modules.conv.Conv1d",function(){}),this._registerConstructor("torch.nn.modules.conv.Conv2d",function(){}),this._registerConstructor("torch.nn.modules.conv.Conv3d",function(){}),this._registerConstructor("torch.nn.modules.conv.ConvTranspose1d",function(){}),this._registerConstructor("torch.nn.modules.conv.ConvTranspose2d",function(){}),this._registerConstructor("torch.nn.modules.conv.ConvTranspose3d",function(){}),this._registerConstructor("torch.nn.modules.distance.CosineSimilarity",function(){}),this._registerConstructor("torch.nn.modules.dropout.Dropout",function(){}),this._registerConstructor("torch.nn.modules.dropout.Dropout2d",function(){}),this._registerConstructor("torch.nn.modules.dropout.Dropout3d",function(){}),this._registerConstructor("torch.nn.modules.fold.Unfold",function(){}),this._registerConstructor("torch.nn.modules.flatten.Flatten",function(){}),this._registerConstructor("torch.nn.modules.instancenorm.InstanceNorm1d",function(){}),this._registerConstructor("torch.nn.modules.instancenorm.InstanceNorm2d",function(){}),this._registerConstructor("torch.nn.modules.instancenorm.InstanceNorm3d",function(){}),this._registerConstructor("torch.nn.modules.linear.Linear",function(){}),this._registerConstructor("torch.nn.modules.linear.Identity",function(){}),this._registerConstructor("torch.nn.modules.loss.BCELoss",function(){}),this._registerConstructor("torch.nn.modules.loss.BCEWithLogitsLoss",function(){}),this._registerConstructor("torch.nn.modules.loss.CrossEntropyLoss",function(){}),this._registerConstructor("torch.nn.modules.loss.L1Loss",function(){}),this._registerConstructor("torch.nn.modules.loss.MSELoss",function(){}),this._registerConstructor("torch.nn.modules.loss.NLLLoss",function(){}),this._registerConstructor("torch.nn.modules.loss.SmoothL1Loss",function(){}),this._registerConstructor("torch.nn.modules.normalization.CrossMapLRN2d",function(){}),this._registerConstructor("torch.nn.modules.normalization.GroupNorm",function(){}),this._registerConstructor("torch.nn.modules.normalization.LayerNorm",function(){}),this._registerConstructor("torch.nn.modules.normalization.LocalResponseNorm",function(){}),this._registerConstructor("torch.nn.modules.padding.ReflectionPad1d",function(){}),this._registerConstructor("torch.nn.modules.padding.ReflectionPad2d",function(){}),this._registerConstructor("torch.nn.modules.padding.ReplicationPad1d",function(){}),this._registerConstructor("torch.nn.modules.padding.ReplicationPad2d",function(){}),this._registerConstructor("torch.nn.modules.padding.ReplicationPad3d",function(){}),this._registerConstructor("torch.nn.modules.padding.ZeroPad2d",function(){}),this._registerConstructor("torch.nn.modules.padding.ConstantPad1d",function(){}),this._registerConstructor("torch.nn.modules.padding.ConstantPad2d",function(){}),this._registerConstructor("torch.nn.modules.padding.ConstantPad3d",function(){}),this._registerConstructor("torch.nn.modules.pixelshuffle.PixelShuffle",function(){}),this._registerConstructor("torch.nn.modules.pooling.AdaptiveAvgPool1d",function(){}),this._registerConstructor("torch.nn.modules.pooling.AdaptiveAvgPool2d",function(){}),this._registerConstructor("torch.nn.modules.pooling.AdaptiveAvgPool3d",function(){}),this._registerConstructor("torch.nn.modules.pooling.AdaptiveMaxPool1d",function(){}),this._registerConstructor("torch.nn.modules.pooling.AdaptiveMaxPool2d",function(){}),this._registerConstructor("torch.nn.modules.pooling.AdaptiveMaxPool3d",function(){}),this._registerConstructor("torch.nn.modules.pooling.AvgPool1d",function(){}),this._registerConstructor("torch.nn.modules.pooling.AvgPool2d",function(){}),this._registerConstructor("torch.nn.modules.pooling.AvgPool3d",function(){}),this._registerConstructor("torch.nn.modules.pooling.FractionalMaxPool2d",function(){}),this._registerConstructor("torch.nn.modules.pooling.MaxPool1d",function(){}),this._registerConstructor("torch.nn.modules.pooling.MaxPool2d",function(){}),this._registerConstructor("torch.nn.modules.pooling.MaxPool3d",function(){}),this._registerConstructor("torch.nn.modules.pooling.MaxUnpool1d",function(){}),this._registerConstructor("torch.nn.modules.pooling.MaxUnpool2d",function(){}),this._registerConstructor("torch.nn.modules.pooling.MaxUnpool3d",function(){}),this._registerConstructor("torch.nn.modules.rnn.GRU",function(){}),this._registerConstructor("torch.nn.modules.rnn.GRUCell",function(){}),this._registerConstructor("torch.nn.modules.rnn.LSTM",function(){}),this._registerConstructor("torch.nn.modules.rnn.LSTMCell",function(){}),this._registerConstructor("torch.nn.modules.rnn.RNN",function(){}),this._registerConstructor("torch.nn.modules.sparse.Embedding",function(){}),this._registerConstructor("torch.nn.modules.sparse.EmbeddingBag",function(){}),this._registerConstructor("torch.nn.modules.transformer.TransformerEncoder",function(){}),this._registerConstructor("torch.nn.modules.transformer.TransformerEncoderLayer",function(){}),this._registerConstructor("torch.nn.modules.upsampling.Upsample",function(){}),this._registerConstructor("torch.nn.modules.upsampling.UpsamplingBilinear2d",function(){}),this._registerConstructor("torch.nn.modules.upsampling.UpsamplingNearest2d",function(){}),this._registerConstructor("torch.nn.parallel.data_parallel.DataParallel",function(){}),this._registerConstructor("torch.nn.parallel.distributed.DistributedDataParallel",function(){}),this._registerConstructor("torch.nn.parameter.Parameter",function(t,n){this.data=t,this.requires_grad=n}),this._registerConstructor("torch.nn.quantized.modules.functional_modules.FloatFunctional",function(){}),this._registerConstructor("torch.nn.utils.spectral_norm.SpectralNorm",function(){}),this._registerConstructor("torch.nn.utils.spectral_norm.SpectralNormStateDictHook",function(){}),this._registerConstructor("torch.nn.utils.spectral_norm.SpectralNormLoadStateDictPreHook",function(){}),this._registerConstructor("torch.nn.utils.weight_norm.WeightNorm",function(){}),this._registerConstructor("torch.optim.adam.Adam",function(){}),this._registerConstructor("torch.optim.adagrad.Adagrad",function(){}),this._registerConstructor("torch.optim.lr_scheduler.MultiStepLR",function(){}),this._registerConstructor("torch.optim.lr_scheduler.StepLR",function(){}),this._registerConstructor("torch.optim.rmsprop.RMSprop",function(){}),this._registerConstructor("torch.optim.sgd.SGD",function(){}),this._registerConstructor("torch.quantization.stubs.DeQuantStub",function(){}),this._registerConstructor("torch.quantization.stubs.QuantStub",function(){}),this._registerConstructor("torchvision.datasets.folder.ImageFolder",function(){}),this._registerConstructor("torchvision.models.alexnet.AlexNet",function(){}),this._registerConstructor("torchvision.models.densenet.DenseNet",function(){}),this._registerConstructor("torchvision.models.densenet._DenseBlock",function(){}),this._registerConstructor("torchvision.models.densenet._DenseLayer",function(){}),this._registerConstructor("torchvision.models.densenet._Transition",function(){}),this._registerConstructor("torchvision.models.detection._utils.BalancedPositiveNegativeSampler",function(){}),this._registerConstructor("torchvision.models.detection._utils.BoxCoder",function(){}),this._registerConstructor("torchvision.models.detection._utils.Matcher",function(){}),this._registerConstructor("torchvision.models.detection.backbone_utils.BackboneWithFPN",function(){}),this._registerConstructor("torchvision.models.detection.faster_rcnn.FasterRCNN",function(){}),this._registerConstructor("torchvision.models.detection.faster_rcnn.FastRCNNPredictor",function(){}),this._registerConstructor("torchvision.models.detection.faster_rcnn.TwoMLPHead",function(){}),this._registerConstructor("torchvision.models.detection.keypoint_rcnn.KeypointRCNN",function(){}),this._registerConstructor("torchvision.models.detection.keypoint_rcnn.KeypointRCNNHeads",function(){}),this._registerConstructor("torchvision.models.detection.keypoint_rcnn.KeypointRCNNPredictor",function(){}),this._registerConstructor("torchvision.models.detection.mask_rcnn.MaskRCNN",function(){}),this._registerConstructor("torchvision.models.detection.mask_rcnn.MaskRCNNHeads",function(){}),this._registerConstructor("torchvision.models.detection.mask_rcnn.MaskRCNNPredictor",function(){}),this._registerConstructor("torchvision.models.detection.roi_heads.RoIHeads",function(){}),this._registerConstructor("torchvision.models.detection.rpn.AnchorGenerator",function(){}),this._registerConstructor("torchvision.models.detection.rpn.RegionProposalNetwork",function(){}),this._registerConstructor("torchvision.models.detection.rpn.RPNHead",function(){}),this._registerConstructor("torchvision.models.detection.transform.GeneralizedRCNNTransform",function(){}),this._registerConstructor("torchvision.models.googlenet.BasicConv2d",function(){}),this._registerConstructor("torchvision.models.googlenet.GoogLeNet",function(){}),this._registerConstructor("torchvision.models.googlenet.Inception",function(){}),this._registerConstructor("torchvision.models.inception.BasicConv2d",function(){}),this._registerConstructor("torchvision.models.inception.Inception3",function(){}),this._registerConstructor("torchvision.models.inception.InceptionAux",function(){}),this._registerConstructor("torchvision.models.inception.InceptionA",function(){}),this._registerConstructor("torchvision.models.inception.InceptionB",function(){}),this._registerConstructor("torchvision.models.inception.InceptionC",function(){}),this._registerConstructor("torchvision.models.inception.InceptionD",function(){}),this._registerConstructor("torchvision.models.inception.InceptionE",function(){}),this._registerConstructor("torchvision.models.mobilenet.ConvBNReLU",function(){}),this._registerConstructor("torchvision.models.mobilenet.MobileNetV2",function(){}),this._registerConstructor("torchvision.models.mobilenet.InvertedResidual",function(){}),this._registerConstructor("torchvision.models.resnet.Bottleneck",function(){}),this._registerConstructor("torchvision.models.resnet.BasicBlock",function(){}),this._registerConstructor("torchvision.models.quantization.resnet.QuantizableBottleneck",function(){}),this._registerConstructor("torchvision.models.quantization.resnet.QuantizableResNet",function(){}),this._registerConstructor("torchvision.models.segmentation.deeplabv3.ASPP",function(){}),this._registerConstructor("torchvision.models.segmentation.deeplabv3.ASPPConv",function(){}),this._registerConstructor("torchvision.models.segmentation.deeplabv3.ASPPPooling",function(){}),this._registerConstructor("torchvision.models.segmentation.deeplabv3.DeepLabHead",function(){}),this._registerConstructor("torchvision.models.segmentation.deeplabv3.DeepLabV3",function(){}),this._registerConstructor("torchvision.models.segmentation.fcn.FCN",function(){}),this._registerConstructor("torchvision.models.segmentation.fcn.FCNHead",function(){}),this._registerConstructor("torchvision.models.shufflenetv2.ShuffleNetV2",function(){}),this._registerConstructor("torchvision.models.shufflenetv2.InvertedResidual",function(){}),this._registerConstructor("torchvision.models.squeezenet.Fire",function(){}),this._registerConstructor("torchvision.models.squeezenet.SqueezeNet",function(){}),this._registerConstructor("torchvision.models.resnet.ResNet",function(){}),this._registerConstructor("torchvision.models.vgg.VGG",function(){}),this._registerConstructor("torchvision.models.video.resnet.BasicBlock",function(){}),this._registerConstructor("torchvision.models.video.resnet.BasicStem",function(){}),this._registerConstructor("torchvision.models.video.resnet.Conv3DNoTemporal",function(){}),this._registerConstructor("torchvision.models.video.resnet.Conv3DSimple",function(){}),this._registerConstructor("torchvision.models.video.resnet.VideoResNet",function(){}),this._registerConstructor("torchvision.models._utils.IntermediateLayerGetter",function(){}),this._registerConstructor("torchvision.ops.feature_pyramid_network.FeaturePyramidNetwork",function(){}),this._registerConstructor("torchvision.ops.feature_pyramid_network.LastLevelMaxPool",function(){}),this._registerConstructor("torchvision.ops.misc.ConvTranspose2d",function(){}),this._registerConstructor("torchvision.ops.misc.FrozenBatchNorm2d",function(){}),this._registerConstructor("torchvision.ops.poolers.LevelMapper",function(){}),this._registerConstructor("torchvision.ops.poolers.MultiScaleRoIAlign",function(){}),this._registerConstructor("torchvision.transforms.transforms.Compose",function(){}),this._registerConstructor("torchvision.transforms.transforms.Normalize",function(){}),this._registerConstructor("torchvision.transforms.transforms.Resize",function(){}),this._registerConstructor("torchvision.transforms.transforms.ToTensor",function(){}),this._registerConstructor("torch.ByteStorage",function(t){this.size=t,this.dataTypeSize=1,this.dataType="uint8"}),this._registerConstructor("torch.CharStorage",function(t){this.size=t,this.dataTypeSize=1,this.dataType="int8"}),this._registerConstructor("torch.ShortStorage",function(t){this.size=t,this.dataTypeSize=2,this.dataType="int16"}),this._registerConstructor("torch.IntStorage",function(t){this.size=t,this.dataTypeSize=4,this.dataType="int32"}),this._registerConstructor("torch.LongStorage",function(t){this.size=t,this.dataTypeSize=8,this.dataType="int64"}),this._registerConstructor("torch.HalfStorage",function(t){this.size=t,this.dataTypeSize=2,this.dataType="float16"}),this._registerConstructor("torch.FloatStorage",function(t){this.size=t,this.dataTypeSize=4,this.dataType="float32"}),this._registerConstructor("torch.DoubleStorage",function(t){this.size=t,this.dataTypeSize=8,this.dataType="float64"}),this._registerConstructor("torch.QInt8Storage",function(t){this.size=t,this.dataTypeSize=1,this.dataType="qint8"}),this._registerConstructor("torch.FloatTensor",function(){this.__setstate__=function(t){this.storage=t[0],this.storage_offset=t[1],this.size=t[2],this.stride=t[3]}}),this._registerConstructor("torch.DoubleTensor",function(){this.__setstate__=function(t){this.storage=t[0],this.storage_offset=t[1],this.size=t[2],this.stride=t[3]}}),this._registerConstructor("torch.cuda.FloatTensor",function(){this.__setstate__=function(t){this.storage=t[0],this.storage_offset=t[1],this.size=t[2],this.stride=t[3]}}),this._registerConstructor("torch.cuda.DoubleTensor",function(){this.__setstate__=function(t){this.storage=t[0],this.storage_offset=t[1],this.size=t[2],this.stride=t[3]}}),this._registerConstructor("numpy.dtype",function(t,n,o){switch(t){case"i1":this.name="int8",this.itemsize=1;break;case"i2":this.name="int16",this.itemsize=2;break;case"i4":this.name="int32",this.itemsize=4;break;case"i8":this.name="int64",this.itemsize=8;break;case"b1":case"u1":this.name="uint8",this.itemsize=1;break;case"u2":this.name="uint16",this.itemsize=2;break;case"u4":this.name="uint32",this.itemsize=4;break;case"u8":this.name="uint64",this.itemsize=8;break;case"f4":this.name="float32",this.itemsize=4;break;case"f8":this.name="float64",this.itemsize=8;break;default:if(t.startsWith("V"))this.itemsize=Number(t.substring(1)),this.name="void"+(8*this.itemsize).toString();else if(t.startsWith("O"))this.itemsize=Number(t.substring(1)),this.name="object";else if(t.startsWith("S"))this.itemsize=Number(t.substring(1)),this.name="string";else if(t.startsWith("U"))this.itemsize=Number(t.substring(1)),this.name="string";else{if(!t.startsWith("M"))throw new pytorch.Error("Unknown dtype '"+t.toString()+"'.");this.itemsize=Number(t.substring(1)),this.name="datetime"}}this.align=n,this.copy=o,this.__setstate__=function(a){switch(a.length){case 8:this.version=a[0],this.byteorder=a[1],this.subarray=a[2],this.names=a[3],this.fields=a[4],this.elsize=a[5],this.alignment=a[6],this.int_dtypeflags=a[7];break;default:throw new pytorch.Error("Unknown numpy.dtype setstate length '"+a.length.toString()+"'.")}}}),this._registerConstructor("numpy.core.multiarray._reconstruct",function(t,n,o){this.subtype=t,this.shape=n,this.dtype=o,this.__setstate__=function(a){this.version=a[0],this.shape=a[1],this.typecode=a[2],this.is_f_order=a[3],this.rawdata=a[4]},this.__read__=function(a){const c={},_=this.subtype.split(".");c.__name__=_.pop(),c.__module__=_.join("."),c.dtype=this.typecode,c.shape=this.shape;let u=c.dtype.itemsize;for(let l=0;l<c.shape.length;l++)u*=c.shape[l];if(typeof this.rawdata=="string"){if(c.data=a.unescape(this.rawdata,u),c.data.length!=u)throw new pytorch.Error("Invalid string array data size.")}else c.data=this.rawdata,c.data.length;return c}}),this._registerFunction("__builtin__.bytearray",function(t,n){if(n==="latin-1"){const o=new Uint8Array(t.length);for(let a=0;a<t.length;a++)o[a]=t.charCodeAt(a);return o}throw new pytorch.Error("Unsupported bytearray encoding '"+JSON.stringify(n)+"'.")}),this._registerFunction("__builtin__.getattr",function(t,n,o){return Object.prototype.hasOwnProperty.call(t,n)?t[n]:o}),this._registerFunction("__builtin__.set",function(t){return t||[]}),this._registerFunction("__builtin__.slice",function(t,n,o){return[t,n,o]}),this._registerFunction("collections.Counter",function(){return{}}),this._registerFunction("collections.OrderedDict",function(t){const n=new Map;if(n.__setitem__=function(o,a){n.set(o,a)},t)for(const o of t)n.__setitem__(o[0],o[1]);return n}),this._registerFunction("numpy.core.multiarray.scalar",function(t,n){let o=n;if(n.constructor!==Uint8Array){o=new Uint8Array(n.length);for(let c=0;c<n.length;c++)o[c]=n.charCodeAt(c)}const a=new DataView(o.buffer,o.byteOffset,o.byteLength);switch(t.name){case"float32":return a.getFloat32(0,!0);case"float64":return a.getFloat64(0,!0);case"uint8":return a.getUint8(0,!0);case"int8":return a.getInt8(0,!0);case"int16":return a.getInt16(0,!0);case"int32":return a.getInt32(0,!0);case"int64":return new long.Long(a.getInt32(0,!0),a.getInt32(4,!0),!1)}throw new pytorch.Error("Unknown scalar type '"+t.name+"'.")}),this._registerFunction("_codecs.encode",function(t){return t}),this._registerFunction("collections.defaultdict",function(){return{}}),this._registerFunction("annotate",function(t,n){return n}),this._registerFunction("int",function(){return NaN}),this._registerFunction("float",function(){return NaN}),this._registerFunction("getattr",function(t,n,o){return Object.prototype.hasOwnProperty.call(t,n)?t[n]:o}),this._registerFunction("unchecked_cast",function(t,n){return n}),this._registerFunction("ops.prim.data",function(t){return t}),this._registerFunction("ops.prim.unchecked_unwrap_optional",function(t){return t}),this._registerFunction("ops.prim.NumToTensor",function(t){return{__module__:"torch",__name__:"Tensor",value:t}}),this._registerFunction("ops.prim.min",function(t){return Math.min.apply(null,t)}),this._registerFunction("ops.prim.shape",function(t){return t.size}),this._registerFunction("ops.quantized.conv_prepack",function(){return{__module__:"torch",__name__:"Tensor",__origin__:"ops.quantized.conv_prepack"}}),this._registerFunction("ops.quantized.conv2d_prepack",function(){return{__module__:"torch",__name__:"Tensor",__origin__:"ops.quantized.conv2d_prepack"}}),this._registerFunction("ops.quantized.linear_prepack",function(){return{__module__:"torch",__name__:"Tensor",__origin__:"ops.quantized.linear_prepack"}}),this._registerFunction("ops.prim.RaiseException",function(t){throw new pytorch.Error(t)}),this._registerFunction("range",function(t,n,o){if(t!==void 0&&Number.isInteger(t)&&n===void 0&&o===void 0)return Array(t).keys();throw new pytorch.Error("Unsupported function range("+JSON.stringify(t)+", "+JSON.stringify(n)+", "+JSON.stringify(o)+")")}),this._registerFunction("torch._utils._rebuild_tensor",function(t,n,o,a){return{__module__:t.__module__,__name__:t.__name__.replace("Storage","Tensor"),storage:t,storage_offset:n,size:o,stride:a}}),this._registerFunction("torch._utils._rebuild_tensor_v2",function(t,n,o,a,c,_){return{__module__:t.__module__,__name__:t.__name__.replace("Storage","Tensor"),storage:t,storage_offset:n,size:o,stride:a,requires_grad:c,backward_hooks:_}}),this._registerFunction("torch._utils._rebuild_parameter",function(t,n,o){const a=s.invoke("torch.nn.parameter.Parameter",[t,n]);return a.backward_hooks=o,a}),this._registerFunction("torch._utils._rebuild_qtensor",function(t,n,o,a,c,_,u){return{__module__:t.__module__,__name__:t.__name__.replace("Storage","Tensor"),storage:t,storage_offset:n,size:o,stride:a,quantizer_params:c,requires_grad:_,backward_hooks:u}}),this._registerFunction("torch._set_item",function(t,n,o){t[n]=o}),this._registerFunction("torch.__contains__",function(t,n){return t[n]!==void 0}),this._registerFunction("torch.__derive_index",function(t,n,o){return n+t*o}),this._registerFunction("torch.__is__",function(t,n){if(t===null&&n===null)return!0;if(t!==null&&n===null||t===null&&n!==null)return!1;throw new pytorch.Error("Unknown 'torch.__is__' expression type.")}),this._registerFunction("torch.__isnot__",function(t,n){if(t===null&&n===null)return!1;if(t!==null&&n===null||t===null&&n!==null)return!0;throw new pytorch.Error("Unknown 'torch.__isnot__' expression type.")}),this._registerFunction("torch.__not__",function(t){if(typeof t=="boolean")return!t;throw new pytorch.Error("Unknown 'torch.__not__' expression type.")}),this._registerFunction("torch.__range_length",function(t,n,o){if(o===0)throw new pytorch.Error("range() arg 3 must not be zero");return o>0&&t<n?1+(n-1-t)/o:o<0&&t>n?1+(t-1-n)/(0-o):0}),this._registerFunction("torch._unwrap_optional",function(t){return t}),this._registerFunction("torch.add",function(t,n){if(typeof t=="number"&&typeof n=="number")return t*n;throw new pytorch.Error("Unknown torch.add expression type.")}),this._registerFunction("torch.append",function(t,n){return t.push(n),n}),this._registerFunction("torch.dict",function(t){if(t)throw new pytorch.Error("'torch.dict' arguments not supported.");return{}}),this._registerFunction("torch.dim",function(t){return t&&t.size?t.size.length:0}),this._registerFunction("torch.eq",function(t,n){if(typeof t=="string"&&typeof n=="string"||typeof t=="number"&&typeof n=="number")return t===n;throw new pytorch.Error("Unknown 'torch.eq' expression type.")}),this._registerFunction("torch.floordiv",function(){}),this._registerFunction("torch.gt",function(t,n){if(typeof t=="number"&&typeof n=="number"&&!isNaN(t)&&!isNaN(n))return t>n;if(isNaN(t)&&!isNaN(n))return!0;throw new pytorch.Error("Unknown 'torch.gt' expression type.")}),this._registerFunction("torch.jit._pickle.build_boollist",function(t){return t}),this._registerFunction("torch.jit._pickle.build_doublelist",function(t){return t}),this._registerFunction("torch.jit._pickle.build_intlist",function(t){return t}),this._registerFunction("torch.jit._pickle.build_tensorlist",function(t){return t}),this._registerFunction("torch.jit._pickle.build_tensor_from_id",function(t){return t}),this._registerFunction("torch.jit._pickle.restore_type_tag",function(t){return t}),this._registerFunction("torch.keys",function(t){return Object.keys(t)}),this._registerFunction("torch.len",function(t){return t?t.length:NaN}),this._registerFunction("torch.le",function(t,n){if(typeof t=="number"&&typeof n=="number")return!isNaN(t)&&!isNaN(n)&&t<=n;throw new pytorch.Error("Unknown 'torch.le' expression type.")}),this._registerFunction("torch.list",function(t){return t}),this._registerFunction("torch.list_with_default",function(t){return t}),this._registerFunction("torch.lt",function(t,n){if(typeof t=="number"&&typeof n=="number")return t<n;throw new pytorch.Error("Unknown 'torch.lt' expression type.")}),this._registerFunction("torch.mul",function(t,n){if(typeof t=="number"&&typeof n=="number")return t*n;if(isNaN(t)||isNaN(n))return NaN;throw new pytorch.Error("Unknown 'torch.mul' expression type.")}),this._registerFunction("torch.ne",function(t,n){if(typeof t=="number"&&typeof n=="number")return!isNaN(t)&&!isNaN(n)&&t!==n;if(Array.isArray(t)&&Array.isArray(n)&&t.length===n.length)return!1;throw new pytorch.Error("Unknown 'torch.ne' expression type.")}),this._registerFunction("torch.neg",function(t){if(typeof t=="number")return-t;throw new pytorch.Error("Unknown 'torch.neg' expression type.")}),this._registerFunction("torch.q_scale",function(){return-1}),this._registerFunction("torch.t",function(t){return t}),this._registerFunction("torch.size",function(t,n){if(t&&Array.isArray(t.size)){if(n===void 0)return t.size;if(Number.isInteger(n)){if(n>=0&&n<t.size.length)return t.size[n];if(n<0&&-n<t.size.length)return t.size[t.size.length+n]}throw new pytorch.Error("Dimension out of range (expected to be in range of "+JSON.stringify(t.size)+", but got "+JSON.stringify(n)+").")}return NaN}),this._registerFunction("torch.slice",function(t,n,o,a){if(a!==1)throw new pytorch.Error("Slicing only supports step=1");return n=Math.max(0,n),o=Math.min(t.length,o),t.slice(n,o)}),this._registerFunction("torch.sub",function(t,n){if(typeof t=="number"&&typeof n=="number")return t*n;throw new pytorch.Error("Unknown 'torch.sub' expression type.")}),this._registerFunction("torch.values",function(t){return Object.keys(t).map(n=>t[n])}),this._registerFunction("torch.warn",function(){}),this._registerFunction("uninitialized",function(t){if(t&&t.__module__==="typing"&&t.__name__==="Tuple")return[];if(t&&t.__module__==="typing"&&t.__name__==="List")return[];if(t&&t.__module__==="typing"&&t.__name__==="Dict")return{};if(t&&t.__module__==="torch"&&t.__name__==="Tensor")return{__module__:t.__module__,__name__:t.__name__};throw new pytorch.Error("Unsupported uninitialized argument '"+JSON.stringify(t)+"'.")})}get context(){return this._context}parse(e){const r=this._sources[e];if(r){const i=this._utf8Decoder.decode(r),s=new this._python.Parser(i,e).parse();if(!s)throw new pytorch.Error("Module '"+e+"' parse error.");return s}return null}package(e,r,i){if(this._python&&!this._packages.has(e)){r=r||"code/"+e.split(".").join("/")+".py";const s=this.parse(r);if(s){let t=this._context.getx(e);t===void 0&&(t={},this._context.setx(e,t)),t.__class__=this._context.scope.builtins.module,t.__name__=e,t.__file__=r,this._packages.set(e,t);const n=this._context.push(t);if(this._block(s.body,n),i)return s}}return this._packages.get(e)}type(e){const r=this._context.getx(e);if(r!==void 0)return r;const i=e.split("."),s=i.pop(),t=i.join("."),n=this.package(t);return n?n[s]:null}invoke(e,r){const i=this.type(e);if(i){if(i.__class__===this._context.scope.builtins.type){const n={};return n.__proto__=i,n.__init__&&typeof n.__init__=="function"&&n.__init__.apply(n,r),n}if(i.__class__===this._context.scope.builtins.function)return i.__call__?i.__call__(r):i.apply(null,r)}this._raiseUnkownName(e);const s=e.split("."),t=s.pop();return{__module__:s.join("."),__name__:t}}call(e,r,i,s){const t=this._target(e,s),n=i.map(a=>this.expression(a,s));if(!t||r!==null&&!t[r]){const a=pytorch.Utility.target(e)+"."+r;if(this.type(a))return this.invoke(a,n);throw new pytorch.Error("Unsupported function '"+a+"'.")}const o=r?t[r]:t;if(o.__class__===this._context.scope.builtins.type){const a={};return a.__proto__=o,a.__init__&&typeof a.__init__=="function"&&a.__init__.apply(a,i),a}if(o.__class__===this._context.scope.builtins.function&&o.__call__)return o.__call__(n);if(o.__class__===this._context.scope.builtins.method&&o.__call__)return o.__call__([t].concat(n));if(typeof o=="function")return o.apply(t,n);throw new pytorch.Error("Unsupported call expression.")}apply(e,r,i){const s=Array.prototype.slice.call(r);i=i.push();for(const t of e.parameters)i.set(t.name,s.shift());return this._block(e.body.statements,i)}_block(e,r){for(e=Array.prototype.slice.call(e);e.length>0;){const i=e.shift();switch(i.type){case"pass":break;case"return":return this.expression(i.expression,r);case"def":{const s=r.get("__name__"),t=this,n=r.get("__class__");let o=null;if(n===this._context.scope.builtins.type)o=this._context.scope.builtins.method;else{if(n!==this._context.scope.builtins.module)throw new pytorch.Error("Invalid function scope.");o=this._context.scope.builtins.function}const a={__class__:o,__globals__:r,__module__:s,__name__:i.name,__code__:i,__call__:function(c){return t.apply(this.__code__,c,this.__globals__)}};r.set(i.name,a);break}case"class":{const s={__class__:this._context.scope.builtins.type,__module__:r.get("__name__"),__name__:i.name};r.set(i.name,s),r=r.push(s),this._block(i.body.statements,r),r=r.pop();break}case"var":r.set(i.name,void 0);break;case"=":this.expression(i,r);break;case"if":{const s=this.expression(i.condition,r);if(s===!0||s){e=i.then.statements.concat(e);break}if(s===!1){e=i.else.statements.concat(e);break}throw new pytorch.Error("Unknown condition.")}case"for":if(i.target.length==1&&i.variable.length===1&&i.variable[0].type==="id"){const s=this.expression(i.target[0],r),t=i.variable[0];let n=[];for(const o of s)n.push({type:"=",target:t,expression:{type:"number",value:o}}),n=n.concat(i.body.statements);e=n.concat(e);break}throw new pytorch.Error("Unsupported 'for' statement.");case"call":this.expression(i,r);break;case"import":for(const s of i.modules){const t=pytorch.Utility.target(s.name),n=this.package(t);s.as&&r.set(s.as,n)}break;default:throw new pytorch.Error("Unknown statement '"+i.type+"'.")}}}expression(e,r){const i=r.getx("self");switch(e.type){case"=":{const s=e.target;if(s.type==="id")return void r.set(s.value,this.expression(e.expression,r));if(s.type==="[]"){if(s.target.type==="id"&&s.arguments.type==="list"&&s.arguments.value.length===1){const t=this.expression(s.arguments.value[0],r);return s.target.value==="__annotations__"&&r.set(s.target.value,r.get(s.target.value)||{}),void(r.get(s.target.value)[t]=this.expression(e.expression,r))}}else{if(s.type==="."&&s.member.type==="id")return void(this.expression(s.target,r)[s.member.value]=this.expression(e.expression,r));if(s.type==="tuple"){const t=this.expression(e.expression,r);if(s.value.length==t.length&&s.value.every(n=>n.type==="id")){for(let n=0;n<t.length;n++)r.set(s.value[n].value,t[n]);return}}}break}case"list":return e.value.map(s=>this.expression(s,r));case"string":return e.value.substring(1,e.value.length-1);case"number":return Number(e.value);case"[]":{if(e.target.type==="id"&&e.arguments.type==="list"&&e.arguments.value.length===1&&r.get(e.target.value)){const t=this.expression(e.arguments.value[0],r);return r.get(e.target.value)[t]}const s=this.expression(e.target,r);if(s&&e.arguments.type==="list"&&(s.__class__===this.context.scope.typing._VariadicGenericAlias||s.__class__===this.context.scope.typing._GenericAlias||s.__class__===this.context.scope.typing._SpecialForm)){const t=Object.assign({},s);return t.__args__=e.arguments.value.map(n=>this.expression(n,r)),t}if(e.arguments.type==="list"&&e.arguments.value.length===1)return s[this.expression(e.arguments.value[0],r)];break}case".":if(e.member.type=="id")return this._target(e.target,r)[e.member.value];throw new pytorch.Error("Unsupported field expression.");case"call":return e.target.type==="id"&&e.target.value==="annotate"&&e.arguments.length===2||e.target.type==="id"&&e.target.value==="unchecked_cast"&&e.arguments.length===2?this.expression(e.arguments[1],r):e.target.type==="."?this.call(e.target.target,e.target.member.value,e.arguments,r):this.call(e.target,null,e.arguments,r);case"id":{switch(e.value){case"self":return i;case"None":return null;case"True":return!0;case"False":return!1}const s=this._context.scope.builtins[e.value]||this._context.scope.typing[e.value]||this._context.scope.torch[e.value];return!s||s.__class__!==this._context.scope.builtins.type&&s.__class__!==this._context.scope.typing._VariadicGenericAlias&&s.__class__!==this._context.scope.typing._GenericAlias&&s.__class__!==this._context.scope.typing._SpecialForm?r.get(e.value):s}case"tuple":return e.value.map(s=>this.expression(s,r))}throw new pytorch.Error("Unknown expression '"+e.type+"'.")}_target(e,r){let i=e,s="";for(;;){if(i.type!=="."||!i.member||i.member.type!=="id"){if(i.type==="id"&&i.value!=="self"&&i.value!=="CONSTANTS"){s=i.value+s;break}s=null;break}s="."+i.member.value+s,i=i.target}if(s){let t=r.getx(s);if(!t&&(t=this.package(s),!t))throw new pytorch.Error("Failed to resolve module '"+s+"'.");return t}return this.expression(e,r)}_registerFunction(e,r){if(this._context.getx(e))throw new pytorch.Error("Function '"+e+"' is already registered.");const i=e.split(".");r.__class__=this._context.scope.builtins.function,r.__name__=i.pop(),r.__module__=i.join("."),this._context.setx(e,r)}_registerConstructor(e,r){if(this._context.getx(e))throw new pytorch.Error("Constructor '"+e+"' is already registered.");const i=e.split("."),s=i.pop(),t=i.join("."),n={__class__:this._context.scope.builtins.type,__name__:s,__module__:t,__init__:function(){r.apply(this,arguments)}};this._context.setx(e,n)}_raiseUnkownName(e){e&&!this._unknownNameMap.has(e)&&(this._unknownNameMap.add(e),this._knownPackageMap.has(e.split(".").shift())&&this._exceptionCallback(new pytorch.Error("Unknown function '"+e+"'."),!1))}},pytorch.Execution.Context=class{constructor(e,r){this._parent=e||null,this._scope=r||{}}push(e){return new pytorch.Execution.Context(this,e)}pop(){return this._parent}get scope(){return this._scope}set(e,r){this._scope[e]=r}get(e){return e in this._scope?this._scope[e]:this._parent?this._parent.get(e):void 0}setx(e,r){const i=e.split(".");if(i.length==1)this.set(i[0],r);else{let s=this.get(i[0]);for(s||(s={},this.set(i[0],s)),i.shift();i.length>1;){const t=i.shift();s[t]=s[t]||{},s=s[t]}s[i[0]]=r}}getx(e){const r=e.split(".");let i=this.get(r[0]);if(i){for(r.shift();r.length>0&&i[r[0]];)i=i[r[0]],r.shift();if(r.length===0)return i}}},pytorch.Container=class{static open(e,r,i,s,t){if(e.entries("zip").some(o=>o.name==="model.json"||o.name==="data.pkl"||o.name.endsWith("/model.json")||o.name.endsWith("/data.pkl")))return new pytorch.Container.Zip(e.entries("zip"),r,i,s,t);const n=e.buffer;return n&&n.length>14&&n[0]==128&&n[1]<16&&[138,10,108,252,156,70,249,32,106,168,80,25].every((o,a)=>o==n[a+2])?new pytorch.Container.Pickle(n,i,t):e.entries("tar").some(o=>o.name=="pickle")?new pytorch.Container.Tar(e.entries("tar"),i,t):null}},pytorch.Container.Tar=class{constructor(e,r,i){this._entries=e,this._pickle=r,this._exceptionCallack=i}get format(){return"PyTorch v0.1.1"}get data(){return this._unpickle(),this._data}get state(){return this._unpickle(),this._state}get littleEndian(){return this._unpickle(),this._littleEndian}_unpickle(){if(!this._entries)return;this._data=null,this._state=null,this._littleEndian=!0;const e=new pytorch.Execution(null,[],this._exceptionCallback),r={};for(const s of this._entries)switch(s.name){case"sys_info":r.sys_info=s.data;break;case"pickle":r.pickle=s.data;break;case"storages":r.storages=s.data;break;case"tensors":r.tensors=s.data}if(this._exceptionCallback=null,this._entries=null,r.sys_info){const s=new this._pickle.Unpickler(r.sys_info).load((t,n)=>e.invoke(t,n));if(s.protocol_version!=1e3)throw new pytorch.Error("Unsupported protocol version '"+s.protocol_version+"'.");if(s.type_sizes&&(s.type_sizes.int&&s.type_sizes.int!=4||s.type_sizes.long&&s.type_sizes.long!=4||s.type_sizes.short&&s.type_sizes.short!=2))throw new pytorch.Error("Unsupported type sizes.");this._littleEndian=s.little_endian}const i={};if(r.storages){const s=new this._pickle.Unpickler(r.storages),t=s.load((n,o)=>e.invoke(n,o));for(let n=0;n<t;n++){const o=s.load(),a=o[0],c=o[2],_=long.Long.fromBytesLE(s.read(8),!1).toNumber(),u=e.invoke(c,[_]);u.data=s.read(u.dataTypeSize*u.size),i[a]=u}}if(r.tensors){const s=new this._pickle.Unpickler(r.tensors),t=s.load((n,o)=>e.invoke(n,o));for(let n=0;n<t;n++){const o=s.load(),a=o[0],c=o[1],_=i[c],u=long.Long.fromBytesLE(s.read(4),!1).toNumber();s.read(4);const l=[];for(let d=0;d<u;d++)l.push(long.Long.fromBytesLE(s.read(8),!1).toNumber());const p=[];for(let d=0;d<u;d++)p.push(long.Long.fromBytesLE(s.read(8),!1).toNumber());const C=long.Long.fromBytesLE(s.read(8),!1).toNumber(),m=_.__name__.replace("Storage","Tensor"),y=e.invoke(_.__module__+"."+m,[]);y.__setstate__([_,C,l,p]),i[a]=y}}if(r.pickle){const s=n=>i[n];let t=new this._pickle.Unpickler(r.pickle).load((n,o)=>e.invoke(n,o),s);if(t){if(!(t instanceof Map)){const o=new Map;for(const a of Object.keys(t))o.set(a,t[a]);t=o}this._state=[];const n={};if(t instanceof Map)for(const o of t){const a=o[0],c=o[1];if(!a||!c){this._state=null;break}const _={};if(_.id=a,_.value=null,c&&c.__module__==="torch.nn.parameter"&&c.__name__==="Parameter"?_.value=c[0]:pytorch.Utility.isTensor(c)&&(_.value=c),!_.value){this._state=null;break}const u=_.id.split(".");if(u.length<2){this._state=null;break}_.name=u.pop();const l=u.join(".");let p=n[l];p||(p={},p.name=l,p.states=[],n[l]=p,this._state.push(p)),p.states.push({name:_.name,arguments:[_]})}}}}},pytorch.Container.Pickle=class{constructor(e,r,i){this._buffer=e,this._pickle=r,this._exceptionCallback=i}get format(){return"PyTorch v0.1.10"}get data(){return this._unpickle(),this._data}get state(){return this._unpickle(),this._state}get littleEndian(){return this._unpickle(),this._littleEndian}_unpickle(){if(!this._buffer)return;const e=new pytorch.Execution(null,[],this._exceptionCallback),r=new this._pickle.Unpickler(this._buffer);this._buffer=null,this._pickle=null,this._exceptionCallback=null,r.load();const i=r.load();if(i!=1001)throw new pytorch.Error("Unsupported protocol version '"+i+"'.");const s=r.load();if(s.protocol_version!=1001)throw new pytorch.Error("Unsupported protocol version '"+s.protocol_version+"'.");if(s.type_sizes&&(s.type_sizes.int&&s.type_sizes.int!=4||s.type_sizes.long&&s.type_sizes.long!=4||s.type_sizes.short&&s.type_sizes.short!=2))throw new pytorch.Error("Unsupported type sizes.");this._littleEndian=s.little_endian;const t=new Map,n=new Map,o=r.load((c,_)=>e.invoke(c,_),c=>{const _=c.shift(),u=c;switch(_){case"module":{const l=u[0],p=u[2];return t.set(l,p),u[0]}case"storage":{const l=u.shift(),p=u.shift();u.shift();const C=u.shift(),m=u.shift();if(!n.has(p)){const y=e.invoke(l,[C]);n.set(p,y)}if(m){const y=m.shift();if(m.shift(),m.shift(),!n.has(y)){const d=null;n.set(y,d)}return n.get(y)}return n.get(p)}}throw new pytorch.Error("Unknown persistent load type '"+_+"'.")});if(!o)throw new pytorch.Error("File format is not PyTorch.");const a=r.load();for(const c of a){const _=n.get(c);if(long.Long.fromBytesLE(r.read(8),!1).toNumber()!=_.size)throw new pytorch.Error("Storage size mismatch.");_.data=r.read(_.dataTypeSize*_.size)}if(this._data=this._findRootModule(o),this._data||(this._state=this._findStateDict(o)),!this._data&&!this._state&&o!=="None")throw new pytorch.Error("File does not contain root module or state dictionary.")}_findRootModule(e){const r=[e,e.model,e.net];for(const i of r)if(i&&i._modules)return i;return null}_findStateDict(e){if(!e)return null;if(e.encoder&&Array.isArray(e.encoder)&&e.decoder&&Array.isArray(e.decoder)&&!e.state_dict&&(e=e.encoder.concat(e.decoder)),e instanceof Map){const i={};for(const s of e){const t=s[0],n=s[1];i[t]=n}e=i}const r=[e.state_dict,e.state,e.model_state,e.model,e.model_state_dict,e.net_dict,e.params,e.generator,e.discriminator,e.g_state,e.network,e.net,e.netG,e.net_states,e.state_dict_stylepredictor,e.state_dict_ghiasi,e];for(const i of r){let s=null;if(s=s||this._convertStateDictList(i),s=s||this._convertStateDictMap(i),s=s||this._convertStateDictGroupMap(i),s)return s}return null}_convertStateDictList(e){if(e&&Array.isArray(e)&&e.every(r=>r.__module__&&r.__name__&&Object.keys(r).filter(i=>pytorch.Utility.isTensor(r[i]).length>0))){const r=[];for(const i of e){const s={type:i.__module__+"."+i.__name__,states:[],attributes:[]};for(const t of Object.keys(i)){const n=i[t];pytorch.Utility.isTensor(n)?s.states.push({name:t,arguments:[{id:"",value:n}]}):s.attributes.push({name:t,value:n})}r.push(s)}return r}if(!e||Array.isArray(e)||e instanceof Map||(e=new Map(Object.keys(e).map(r=>[r,e[r]]))),e&&e instanceof Map){for(const i of e){const s=i[0],t=i[1];if(!s||!t||!pytorch.Utility.isTensor(t)&&!(s.endsWith("._packed_params.dtype")||s.endsWith("._packed_params._packed_params")&&Array.isArray(t)&&t.every(n=>pytorch.Utility.isTensor(n))))return null}const r=new Map;for(const i of e){const s=i[0],t=i[1];if(t!==null){let n="",o="";if(s.endsWith("_packed_params.dtype"))o="_packed_params.dtype",n=s.substring(0,s.length-o.length-1);else if(s.endsWith("_packed_params._packed_params")&&Array.isArray(t))o="_packed_params._packed_params",n=s.substring(0,s.length-o.length-1);else{let c=s.split(".");c.length<2&&(c=["",c[0]]),o=c.pop(),n=c.join(".")}r.has(n)||r.set(n,{name:n,states:[],attributes:[]});const a=r.get(n);switch(o){case"_packed_params.dtype":a.attributes.push({name:o,value:t});break;case"_packed_params._packed_params":a.states.push({name:o,arguments:t.map(c=>({id:"",value:c}))});break;default:if(a.states.push({name:o,arguments:[{id:s,value:t}]}),a.name==""&&a.states.length>4)return null}}}return r.values()}return null}_convertStateDictMap(e){if(!e||Array.isArray(e))return null;const r=[],i={};for(const s in e){const t=s.split(".");if(t.length<1)return null;const n={};if(n.id=s,n.name=t.pop(),n.value=e[s],n.value&&n.value.__module__==="torch.nn.parameter"&&n.value.__name__==="Parameter"&&pytorch.Utility.isTensor(n.value.data)&&(n.value=n.value.data),!pytorch.Utility.isTensor(n.value))return null;const o=t.join(".");let a=i[o];a||(a={},a.name=o,a.states=[],i[o]=a,r.push(a)),a.states.push({name:n.name,arguments:[n]})}return r}_convertStateDictGroupMap(e){if(!e||Array.isArray(e))return null;const r=[],i={};for(const s in e){let t=i[s];t||(t={},t.name=s,t.states=[],t.attributes=[],i[s]=t,r.push(t));const n=e[s];if(!n)return null;if(n instanceof Map)for(const o of n){const a=o[0],c=o[1];if(!a||c&&!pytorch.Utility.isTensor(c))return null;const _={id:s+"."+a,value:c};t.states.push({name:a,arguments:[_]})}else{if(n instanceof Uint8Array||Object(n)!==n)return null;{let o=!1;for(const a in n){const c=n[a];if(pytorch.Utility.isTensor(c)){const _={id:s+"."+a,value:c};t.states.push({name:a,arguments:[_]}),o=!0}else if(c!==Object(c))t.attributes.push({name:a,value:c});else{if(!c||!c.data||c.__module__!=="torch.nn.parameter"||c.__name__!=="Parameter")return null;{const _={id:s+"."+a,value:c.data};t.states.push({name:a,arguments:[_]}),o=!0}}}if(!o)return null}}}return r}},pytorch.Container.Zip=class{constructor(e,r,i,s,t){this._entries=e,this._metadata=r,this._pickle=i,this._python=s,this._exceptionCallback=t;const n=this._entries.find(a=>a.name=="model.json"||a.name=="data.pkl"||a.name.endsWith("/model.json")||a.name.endsWith("/data.pkl"));if(!n)throw new pytorch.Error("PyTorch Zip container does not contain 'data.pkl' or 'model.json'.");const o=n.name.lastIndexOf("/");this._prefix=o===-1?"":n.name.substring(0,o+1),this._utf8Decoder=new TextDecoder("utf-8")}get format(){if(this._format===void 0){if(this._entry("model.json"))this._format=this._entry("attributes.pkl")?"TorchScript v1.1":"TorchScript v1.0";else if(this._entry("data.pkl")){const e=this._entry("version"),r=e?this._utf8Decoder.decode(e.data).split(`
`).shift():"",i={1:"v1.3",2:"v1.4",3:"v1.6",4:"v1.7"}[r];i||this._exceptionCallback(new pytorch.Error("Unsupported PyTorch Zip version '"+r+"'.")),this._format=(this._entry("constants.pkl")?"TorchScript":"PyTorch")+" "+(i||"v-"+r.toString())}}return this._format}get producer(){return this.data?this._producer:""}get name(){return this._name}get data(){if(this._data===void 0){this._data=null;const e=this._entry("data.pkl");if(e&&e.data)this._data=this._unpickle(e.data,this._storage("data"));else{const r=this._entry("model.json");if(r){const i=JSON.parse(this._utf8Decoder.decode(r.data));this._producer=i.producerName+(i.producerVersion?" v"+i.producerVersion:""),this._data=i.mainModule||{},this._name=this._data.name||"",this._data.torchscriptArena&&(this._torchscriptArena=this._data.torchscriptArena.key);const s=[this._data],t=new Map;for(const o of this._entries)t.set(o.name,o.data);const n=new Map([["FLOAT","Float"],["FLOAT16","Half"],["DOUBLE","Double"],["INT8","Char"],["INT32","Int"],["INT64","Long"]]);this._constants=i.tensors||[];for(const o of this._constants){const a=this._prefix+o.data.key;if(!n.has(o.dataType))throw new pytorch.Error("Unknown tensor data type '"+o.dataType+"'.");const c=n.get(o.dataType);o.__module__="torch",o.__name__="Tensor",o.name=o.data.key,o.size=o.dims?o.dims.map(_=>parseInt(_,10)):null,o.storage=this.execution.invoke("torch."+c+"Storage",[o.size]),o.storage.data=t.get(a)}for(;s.length>0;){const o=s.shift();if(o.__module__||o.__name__||(o.__module__="torch.nn.modules.module",o.__name__="Module"),o.name&&(o.__id__=o.name),o.submodules){for(const c of o.submodules)o[c.name]=c,c.__parent__=o,s.push(c);delete o.submodules}let a=[];o.parameters&&(a=a.concat(o.parameters),delete o.parameters),o.arguments&&(a=a.concat(o.arguments),delete o.arguments);for(const c of a){const _=this._constants[c.tensorId];o[c.name]=_,c.__module__&&c.__name__||(c.__module__="torch",c.__name__="Tensor")}}}}}return this._data}get constants(){if(this._constants===void 0){this._constants=[];const e=this._entry("constants.pkl");e&&e.data&&(this._constants=this._unpickle(e.data,this._storage("constants")))}return this._constants}get execution(){if(this._execution===void 0){this._types=new Map;const e={};for(const i of this._entries)if(i.name.startsWith(this._prefix+"code")){const s=i.name.substring(this._prefix.length);if(e[s])throw new pytorch.Error("Duplicate source file '"+s+"'.");e[s]=i.data}this._execution=new pytorch.Container.Zip.Execution(this._python,e,this._exceptionCallback,this._metadata);const r={};for(let i=0;i<this.constants.length;i++)r["c"+i.toString()]=this.constants[i];this._execution.context.set("CONSTANTS",r)}return this._execution}_entry(e){return this._entries.find(r=>r.name==this._prefix+e)}_unpickle(e,r){const i=new Map;return new this._pickle.Unpickler(e).load((s,t)=>this.execution.invoke(s,t),s=>{const t=s.shift();if(t!=="storage")throw new pytorch.Error("Unknown persistent load type '"+t+"'.");const n=s.shift(),o=s.shift();s.shift();const a=s.shift();let c=null;i.has(o)?c=i.get(o):(c=this.execution.invoke(n,[a]),c.data=r.get(o),i.set(o,c));const _=s.shift();if(_){const u=_.shift();_.shift(),_.shift();let l=null;return i.has(u)?l=i.get(o):(l=null,i.set(u,l)),l}return c})}_storage(e){const r=new Map,i=this._prefix+e+"/";for(const s of this._entries)if(s.name.startsWith(i)){const t=s.name.substring(i.length);r.set(t,s.data)}return r}_type(e){if(!this._types.has(e)){const r=e.split("."),i=r.pop(),s="code/"+r.join("/")+".py",t=this.execution.parse(s);if(t){for(const n of t.body)if(n.type==="class"&&n.name==i){this._types.set(e,n);break}}}return this._types.get(e)}trace(){if(this._inputs=[],this._outputs=[],this.execution.reset(),this._torchscriptArena){const e=this.execution.parse(this._torchscriptArena);for(const r of e.body)if(r.type=="def"){const i=this,s=this.execution.context,t={__class__:this.execution.context.scope.builtins.function,__name__:r.name,__code__:r,__call__:function(n){return i.execution.apply(this.__code__,n,s)}};this.data[r.name]=t}}if(this.data.forward){const e=[this.data];if(this.data.forward.__code__&&this.data.forward.__code__.parameters){for(const s of this.data.forward.__code__.parameters)if(s.name!=="self"){const t=s.parameterType;t.type==="type"&&t.name.type&&(t.name.value==="Tensor"&&(this._inputs.push(s.name),e.push({__module__:"torch",__name__:"Tensor",__variable__:s.name,__origin__:"trace-input-tensor"})),t.name.value==="Tuple"&&t.arguments.every(n=>n.type==="type"&&n.name.type==="id"&&n.name.value==="Tensor")&&(this._inputs.push(s.name),e.push(t.arguments.map(()=>({__module__:"torch",__name__:"Tensor",__variable__:s.name,__origin__:"trace-input-tuple"})))),t.name.value==="List"&&t.arguments.every(n=>n.type==="type"&&n.name.type==="id"&&n.name.value==="Tensor")&&(this._inputs.push(s.name),e.push([{__module__:"torch",__name__:"Tensor",__variable__:s.name,size:[NaN,NaN],__origin__:"trace-input-list"}])))}}const r=this.data.forward.__call__(e),i=Array.isArray(r)?r:[r];for(const s of i)pytorch.Utility.isTensor(s)&&this._outputs.push(s.__variable__);return this._nodes=this.execution.nodes,!0}throw new pytorch.Error("Module 'forward' not implemented.")}get inputs(){return this._inputs}get outputs(){return this._outputs}get nodes(){return this._nodes}},pytorch.Container.Zip.Execution=class extends pytorch.Execution{constructor(e,r,i,s){super(e,r,i),this._metadata=s,this.reset()}reset(){this._nodes=[],this._variableIndex=0}get nodes(){return this._nodes}call(e,r,i,s){let t=pytorch.Utility.target(e),n=null;if(t&&t+"."+r=="ops.prim.NumToTensor"&&i.length===1&&i[0].type==="call"&&i[0].target.member.type=="id"){const o=i[0];t=pytorch.Utility.target(o.target.target),i=o.arguments,r=o.target.member.value,n=["int64"]}if(t){const o=t+"."+r;let a=this._metadata.type(o);if(a){Array.isArray(a)||(a=[a]);const c=i.map(_=>_.type==="="&&_.target&&_.target.type==="id"?this.expression(_.expression,s):this.expression(_,s));for(const _ of a){const u=Array.prototype.slice.call(i),l=Array.prototype.slice.call(c),p={type:_.name,inputs:[],attributes:[],outputs:[]},C=[];let m=!1;const y=Array.prototype.slice.call(_.inputs||[]).concat(Array.prototype.slice.call(_.attributes||[]));for(;y.length>0&&l.length>0;){if(u.every(h=>h.type==="="&&h.target&&h.target.type==="id")&&y.every(h=>h.type!=="tensor"&&h.type!=="tensor[]")){const h=new Map;for(const f of y)h.set(f.name,f);for(;u.length>0;){const f=u.shift(),g=l.shift(),b=h.get(f.target.value);if(!b){m=!0;break}if(!pytorch.Utility.isType(g,b.type)){if(b.optional)continue;m=!0;break}p.attributes.push({name:b.name,value:g})}continue}if(m)break;const v=y.shift();switch(v.type){case"tensor":{let h=l[0];if(Array.isArray(h)||!pytorch.Utility.isTensor(h)&&h!==null){if(v.optional){h===void 0&&(u.shift(),l.shift());continue}m=!0;break}u.shift(),l.shift(),h===null&&(h={}),h.__variable__||(h.__variable__=this._variable());const f=[];f.push({id:h.__variable__}),C.push(h),p.inputs.push(f);break}case"tensor[]":{const h=l[0];if(!Array.isArray(h)||!h.every(g=>pytorch.Utility.isTensor(g)||g===null)){if(v.optional)continue;m=!0;break}u.shift(),l.shift();const f=[];for(let g of h)g===null&&(g={}),g.__variable__||(g.__variable__=this._variable()),f.push({id:g.__variable__}),C.push(g);p.inputs.push(f);break}default:{const h=u[0],f=l[0];if(!pytorch.Utility.isType(f,v.type)){if(v.optional)continue;m=!0;break}if(h.type==="=")throw new pytorch.Error("Expected named argument.");u.shift(),l.shift(),p.attributes.push({name:v.name,value:f});break}}if(m)break}if(m)continue;const d=[];for(const v of _.outputs)switch(v.type){case"tensor":{const h={__module__:"torch",__name__:"Tensor",__origin__:"invoke-output-"+o};switch(o){case"torch.cat":case"torch.conv2d":case"torch.dropout":case"torch.flatten":case"torch.max_pool2d":case"torch.quantize_per_tensor":case"torch.relu_":case"torch.hardtanh_":case"torch.slice":h.size=[NaN,NaN,NaN,NaN];break;case"torch.conv3d":h.size=[NaN,NaN,NaN,NaN,NaN];break;case"torch.embedding":h.size=[NaN,NaN,NaN];break;case"torch.ones":case"torch.zeros":case"torch.zeros_like":h.size=this.expression(i[0],s)}h.__variable__=this._variable(),d.push(h),p.outputs.push([{id:h.__variable__}]);break}case"tensor[]":{let h=1;switch(o){case"torch.chunk":h=p.attributes.filter(b=>b.name=="chunks")[0].value}const f=[],g=[];for(let b=0;b<h;b++){const w={__module__:"torch",__name__:"Tensor",__origin__:"invoke-output-"+o};w.__variable__=this._variable(),f.push(w),g.push({id:w.__variable__})}d.push(f),p.outputs.push(g);break}default:{if(!n||_.outputs.length!==1||_.outputs[0].type!==n[0]){m=!0;break}const h={__module__:"torch",__name__:"Tensor",__origin__:"invoke-output-"+o};h.__variable__=this._variable(),d.push(h),p.outputs.push([{id:h.__variable__}]);break}}if(!m){for(const v of C)v.__count__=(v.__count__||0)+1;return this._nodes.push(p),d.length>1?d:d[0]}}}}return super.call(e,r,i,s)}_variable(){return this._variableIndex++,this._variableIndex.toString()}},pytorch.ScalarType={uint8:0,int8:1,int16:2,int32:3,int64:4,float16:5,float32:6,float64:7,complex32:8,complex64:9,complex128:10,boolean:11,qint8:12,quint8:13,qint32:14,bfloat16:15},pytorch.MemoryFormat={Contiguous:0,Preserve:1,ChannelsLast:2,ChannelsLast3d:3},pytorch.Layout={Strided:0,Sparse:1,Mkldnn:2},pytorch.Utility=class{static target(e){return e.type=="id"?e.value:e.type=="."?pytorch.Utility.target(e.target)+"."+pytorch.Utility.target(e.member):null}static isTensor(e){return e&&(e.__module__==="torch"||e.__module__==="torch.cuda")&&e.__name__&&e.__name__.endsWith("Tensor")}static isType(e,r){switch(r){case"tensor":return!Array.isArray(e)&&(pytorch.Utility.isTensor(e)||e===null);case"tensor[]":return Array.isArray(e)&&e.length>0&&e.every(i=>pytorch.Utility.isTensor(i)||i===null);case"boolean":return e===!0||e===!1;case"int64":return Number.isInteger(e)||isNaN(e);case"int64[]":return Array.isArray(e)&&e.every(i=>Number.isInteger(i)||Number.isNaN(i)||i===void 0);case"float32":case"float64":return e!==null&&e!==Object(e);case"Layout":case"ScalarType":case"MemoryFormat":return Number.isInteger(e);case"Device":return e===null||e===Object(e);case"scalar":return e!==null||e!==Object(e)}return!0}},typeof module!="undefined"&&typeof module.exports=="object"&&(module.exports.ModelFactory=pytorch.ModelFactory);
