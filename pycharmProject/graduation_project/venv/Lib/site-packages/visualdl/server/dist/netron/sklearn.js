var sklearn=sklearn||{},long=long||{Long:require("long")},zip=zip||require("./zip");sklearn.ModelFactory=class{match(e){const n=e.identifier.split(".").pop().toLowerCase();if(["pkl","pickle","joblib","model","meta","pb","pt","h5"].indexOf(n)!==-1){const s=e.buffer;if(s){const c=[138,10,108,252,156,70,249,32,106,168,80,25];if(s.length>14&&s[0]==128&&c.every((t,a)=>t==s[a+2]))return!1;if(s.length>1&&s[s.length-1]===46||s.length>2&&s[0]===128&&s[1]<5)return!0}}if(["pkl","joblib"].indexOf(n)!==-1){const s=e.buffer;if(s&&s.length>0&&s[0]==120)return!0}return!1}open(e,n){return n.require("./pickle").then(s=>{const c=e.identifier;return sklearn.Metadata.open(n).then(t=>{try{const a=new sklearn.Container(e.buffer,s,(o,f)=>{const h=o&&o.message?o.message:o.toString();n.exception(new sklearn.Error(h.replace(/\.$/,"")+" in '"+c+"'."),f)});if(!a.weights&&!a.data)throw new sklearn.Error("No root object.");return new sklearn.Model(t,a.data,a.weights)}catch(a){n.exception(a,!1);const o=a&&a.message?a.message:a.toString();throw new sklearn.Error(o.replace(/\.$/,"")+" in '"+c+"'.")}})})}},sklearn.Model=class{constructor(e,n,s){const c=Array.isArray(n)?n:[n],t=Array.from(new Set(c.map(a=>{if(a&&a.__module__){if(a.__module__.startsWith("sklearn."))return"scikit-learn"+(a._sklearn_version?" v"+a._sklearn_version.toString():"");if(a.__module__.startsWith("xgboost."))return"XGBoost"+(a._sklearn_version?" v"+a._sklearn_version.toString():"");if(a.__module__.startsWith("nolearn.lasagne."))return"Lasagne";if(a.__module__.startsWith("gensim."))return"gensim"}return"Pickle"})).values());if(t.length>1)throw new sklearn.Error("Invalid array format '"+JSON.stringify(t)+"'.");this._format=t[0],this._graphs=c.map((a,o)=>new sklearn.Graph(e,o,a,s))}get format(){return this._format}get graphs(){return this._graphs}},sklearn.Graph=class{constructor(e,n,s,c){if(this._name=n.toString(),this._metadata=e,this._nodes=[],this._groups=!1,s)this._process("","",s,["data"]);else if(c instanceof Map){const t=new Map,a=[];for(const o of c){const f=o[0],h=f.split("_"),r=o[1],l=h.length>1?h.pop():"?",u=h.join("_");let i=t.get(u);i||(i={id:u,arrays:[]},a.push(i),t.set(u,i)),i.arrays.push({key:f,name:l,value:r})}this._nodes=this._nodes.concat(a.map(o=>{const f=o.arrays.map(h=>new sklearn.Parameter(h.name,[new sklearn.Argument(h.key,null,new sklearn.Tensor(h.key,h.value))]));return new sklearn.Node(this._metadata,"",o.id,{__module__:"sklearn._",__name__:"Weights"},f,[])}))}}_process(e,n,s,c){switch([s.__module__,s.__name__].join(".")){case"sklearn.pipeline.Pipeline":{this._groups=!0,n=n||"pipeline";const t=this._concat(e,n);for(const a of s.steps)c=this._process(t,a[0],a[1],c);return c}case"sklearn.pipeline.FeatureUnion":{this._groups=!0;let t=[];n=n||"union";const a=this._concat(e,n),o=this._concat(e,n);this._add(o,a,s,c,[a]);for(const f of s.transformer_list)t=t.concat(this._process(o,f[0],f[1],[a]));return t}case"sklearn.compose._column_transformer.ColumnTransformer":{this._groups=!0,n=n||"transformer";const t=this._concat(e,n),a=this._concat(e,n);let o=[];this._add(a,t,s,c,[t]);for(const f of s.transformers)o=o.concat(this._process(a,f[0],f[1],[t]));return o}default:{const t=this._concat(e,n);return this._add(e,t,s,c,[t]),[t]}}}_add(e,n,s,c,t){const a=[];for(const o of Object.keys(s))if(!o.startsWith("_")){const f=s[o];sklearn.Utility.isTensor(f)&&a.push(new sklearn.Tensor(o,f))}c=(c=c.map(o=>new sklearn.Parameter(o,[new sklearn.Argument(o,null,null)]))).concat(a.map(o=>new sklearn.Parameter(o.name,[new sklearn.Argument("",null,o)]))),t=t.map(o=>new sklearn.Parameter(o,[new sklearn.Argument(o,null,null)])),this._nodes.push(new sklearn.Node(this._metadata,e,n,s,c,t))}_concat(e,n){return e===""?n:`${e}/${n}`}get name(){return this._name}get groups(){return this._groups}get inputs(){return[]}get outputs(){return[]}get nodes(){return this._nodes}},sklearn.Parameter=class{constructor(e,n){this._name=e,this._arguments=n}get name(){return this._name}get visible(){return!0}get arguments(){return this._arguments}},sklearn.Argument=class{constructor(e,n,s){if(typeof e!="string")throw new sklearn.Error("Invalid argument identifier '"+JSON.stringify(e)+"'.");this._name=e,this._type=n||null,this._initializer=s||null}get name(){return this._name}get type(){return this._initializer?this._initializer.type:this._type}get initializer(){return this._initializer}},sklearn.Node=class{constructor(e,n,s,c,t,a){this._metadata=e,this._group=n||"",this._name=s||"",this._type=c.__module__&&c.__name__?c.__module__+"."+c.__name__:c.__name__?c.__name__:"Object",this._inputs=t,this._outputs=a,this._attributes=[],this._initializers=[];for(const o of Object.keys(c))if(!o.startsWith("_")){const f=c[o];if(f&&!Array.isArray(f)&&f===Object(f)&&sklearn.Utility.isTensor(f))this._initializers.push(new sklearn.Tensor(o,f));else{const h=e.attribute(this._type,o);this._attributes.push(new sklearn.Attribute(h,o,f))}}}get type(){return this._type}get name(){return this._name}get group(){return this._group?this._group:null}get metadata(){return this._metadata.type(this._type)}get inputs(){return this._inputs}get outputs(){return this._outputs}get attributes(){return this._attributes}},sklearn.Attribute=class{constructor(e,n,s){this._name=n,this._value=s,e&&(Object.prototype.hasOwnProperty.call(e,"option")&&e.option=="optional"&&this._value==null||Object.prototype.hasOwnProperty.call(e,"visible")&&!e.visible||Object.prototype.hasOwnProperty.call(e,"default")&&sklearn.Attribute._isEquivalent(e.default,this._value))&&(this._visible=!1)}get name(){return this._name}get value(){return this._value}get visible(){return this._visible!=0}static _isEquivalent(e,n){if(e===n)return e!==0||1/e==1/n;if(e==null||n==null)return!1;if(e!=e)return n!=n;const s=typeof e;if(s!=="function"&&s!=="object"&&typeof n!="object")return!1;const c=toString.call(e);if(c!==toString.call(n))return!1;switch(c){case"[object RegExp]":case"[object String]":return""+e==""+n;case"[object Number]":return+e!=+e?+n!=+n:+e==0?1/+e==1/n:+e==+n;case"[object Date]":case"[object Boolean]":return+e==+n;case"[object Array]":{let o=e.length;if(o!==n.length)return!1;for(;o--;)if(!sklearn.Attribute._isEquivalent(e[o],n[o]))return!1;return!0}}const t=Object.keys(e);let a=t.length;if(Object.keys(n).length!=a)return!1;for(;a--;){const o=t[a];if(!Object.prototype.hasOwnProperty.call(n,o)||!sklearn.Attribute._isEquivalent(e[o],n[o]))return!1}return!0}},sklearn.Tensor=class{constructor(e,n){if(this._name=e,!sklearn.Utility.isTensor(n)){const s=[n.__module__,n.__name__].join(".");throw new sklearn.Error("Unknown tensor type '"+s+"'.")}this._kind="Array",this._type=new sklearn.TensorType(n.dtype.name,new sklearn.TensorShape(n.shape)),this._data=n.data}get name(){return this._name}get type(){return this._type}get kind(){return this._kind}get state(){return this._context().state||null}get value(){const e=this._context();return e.state?null:(e.limit=Number.MAX_SAFE_INTEGER,this._decode(e,0))}toString(){const e=this._context();if(e.state)return"";e.limit=1e4;const n=this._decode(e,0);switch(this._type.dataType){case"int64":case"uint64":return sklearn.Tensor._stringify(n,"","    ")}return JSON.stringify(n,null,4)}_context(){const e={index:0,count:0,state:null};if(!this._type)return e.state="Tensor has no data type.",e;if(!this._data)return e.state="Tensor is data is empty.",e;switch(e.dataType=this._type.dataType,e.dimensions=this._type.shape.dimensions,e.dataType){case"float32":case"float64":case"int32":case"uint32":case"int64":case"uint64":e.rawData=new DataView(this._data.buffer,this._data.byteOffset,this._data.byteLength);break;default:return e.state="Tensor data type '"+e.dataType+"' is not implemented.",e}return e}_decode(e,n){const s=[],c=e.dimensions[n];if(n==e.dimensions.length-1)for(let t=0;t<c;t++){if(e.count>e.limit)return s.push("..."),s;switch(e.dataType){case"float32":s.push(e.rawData.getFloat32(e.index,!0)),e.index+=4,e.count++;break;case"float64":s.push(e.rawData.getFloat64(e.index,!0)),e.index+=8,e.count++;break;case"int32":s.push(e.rawData.getInt32(e.index,!0)),e.index+=4,e.count++;break;case"uint32":s.push(e.rawData.getUint32(e.index,!0)),e.index+=4,e.count++;break;case"int64":s.push(new long.Long(e.rawData.getUint32(e.index,!0),e.rawData.getUint32(e.index+4,!0),!1)),e.index+=8,e.count++;break;case"uint64":s.push(new long.Long(e.rawData.getUint32(e.index,!0),e.rawData.getUint32(e.index+4,!0),!0)),e.index+=8,e.count++}}else for(let t=0;t<c;t++){if(e.count>e.limit)return s.push("..."),s;s.push(this._decode(e,n+1))}return s}static _stringify(e,n,s){if(Array.isArray(e)){const c=[];c.push("[");const t=e.map(a=>sklearn.Tensor._stringify(a,n+s,s));return t.length>0&&c.push(t.join(`,
`)),c.push("]"),c.join(`
`)}return n+e.toString()}},sklearn.TensorType=class{constructor(e,n){this._dataType=e,this._shape=n}get dataType(){return this._dataType}get shape(){return this._shape}toString(){return this.dataType+this._shape.toString()}},sklearn.TensorShape=class{constructor(e){this._dimensions=e}get dimensions(){return this._dimensions}toString(){return this._dimensions?"["+this._dimensions.map(e=>e.toString()).join(",")+"]":""}},sklearn.Metadata=class{static open(e){return sklearn.Metadata._metadata?Promise.resolve(sklearn.Metadata._metadata):e.request(null,"sklearn-metadata.json","utf-8").then(n=>(sklearn.Metadata._metadata=new sklearn.Metadata(n),sklearn.Metadata._metadata)).catch(()=>(sklearn.Metadata._metadata=new sklearn.Metadata(null),sklearn.Metadata._metadata))}constructor(e){if(this._map=new Map,this._attributeCache=new Map,e){const n=JSON.parse(e);if(n)for(const s of n)s.name&&s.schema&&(s.schema.name=s.name,this._map.set(s.name,s.schema))}}type(e){return this._map.get(e)}attribute(e,n){const s=e+":"+n;if(!this._attributeCache.has(s)){const c=this.type(e);if(c&&c.attributes&&c.attributes.length>0)for(const t of c.attributes)this._attributeCache.set(e+":"+t.name,t);this._attributeCache.has(s)||this._attributeCache.set(s,null)}return this._attributeCache.get(s)}},sklearn.Container=class{constructor(e,n,s){e.length>0&&e[0]==120&&(e=new zip.Inflater().inflate(e));const c=new n.Unpickler(e),t={},a={};t["numpy.dtype"]=function(r,l,u){switch(r){case"i1":this.name="int8",this.itemsize=1;break;case"i2":this.name="int16",this.itemsize=2;break;case"i4":this.name="int32",this.itemsize=4;break;case"i8":this.name="int64",this.itemsize=8;break;case"u1":this.name="uint8",this.itemsize=1;break;case"u2":this.name="uint16",this.itemsize=2;break;case"u4":this.name="uint32",this.itemsize=4;break;case"u8":this.name="uint64",this.itemsize=8;break;case"f2":this.name="float16",this.itemsize=2;break;case"f4":this.name="float32",this.itemsize=4;break;case"f8":this.name="float64",this.itemsize=8;break;case"b1":this.name="int8",this.itemsize=1;break;default:if(r.startsWith("V"))this.itemsize=Number(r.substring(1)),this.name="void"+(8*this.itemsize).toString();else if(r.startsWith("O"))this.itemsize=Number(r.substring(1)),this.name="object";else if(r.startsWith("S"))this.itemsize=Number(r.substring(1)),this.name="string";else if(r.startsWith("U"))this.itemsize=Number(r.substring(1)),this.name="string";else{if(!r.startsWith("M"))throw new sklearn.Error("Unknown dtype '"+r.toString()+"'.");this.itemsize=Number(r.substring(1)),this.name="datetime"}}this.align=l,this.copy=u,this.__setstate__=function(i){switch(i.length){case 8:this.version=i[0],this.byteorder=i[1],this.subarray=i[2],this.names=i[3],this.fields=i[4],this.elsize=i[5],this.alignment=i[6],this.int_dtypeflags=i[7];break;default:throw new sklearn.Error("Unknown numpy.dtype setstate length '"+i.length.toString()+"'.")}}},t["numpy.core.multiarray._reconstruct"]=function(r,l,u){this.subtype=r,this.shape=l,this.dtype=u,this.__setstate__=function(i){this.version=i[0],this.shape=i[1],this.typecode=i[2],this.is_f_order=i[3],this.rawdata=i[4]},this.__read__=function(i){const _={};sklearn.Utility.applyType(_,this.subtype),_.dtype=this.typecode,_.shape=this.shape;const m=_.shape&&_.shape.length>0?_.shape.reduce((d,g)=>d*g):1,p=_.dtype.itemsize*m;if(typeof this.rawdata=="string"){if(_.data=i.unescape(this.rawdata,p),_.data.length!=p)throw new sklearn.Error("Invalid string array data size.")}else _.data=this.rawdata;return _}},t["joblib.numpy_pickle.NumpyArrayWrapper"]=function(){this.__setstate__=function(r){this.subclass=r.subclass,this.dtype=r.dtype,this.shape=r.shape,this.order=r.order,this.allow_mmap=r.allow_mmap},this.__read__=function(r){if(this.dtype.name=="object")return r.load(h,null);{const u=this.dtype.itemsize*this.shape.reduce((i,_)=>i*_);this.data=r.read(u)}const l={dtype:this.dtype,shape:this.shape,data:this.data};return sklearn.Utility.applyType(l,this.subclass),l}},t["gensim.models.doc2vec.Doctag"]=function(){},t["gensim.models.doc2vec.Doc2Vec"]=function(){},t["gensim.models.doc2vec.Doc2VecTrainables"]=function(){},t["gensim.models.doc2vec.Doc2VecVocab"]=function(){},t["gensim.models.fasttext.FastText"]=function(){},t["gensim.models.fasttext.FastTextTrainables"]=function(){},t["gensim.models.fasttext.FastTextVocab"]=function(){},t["gensim.models.fasttext.FastTextKeyedVectors"]=function(){},t["gensim.models.keyedvectors.Doc2VecKeyedVectors"]=function(){},t["gensim.models.keyedvectors.Vocab"]=function(){},t["gensim.models.keyedvectors.Word2VecKeyedVectors"]=function(){},t["gensim.models.phrases.Phrases"]=function(){},t["gensim.models.tfidfmodel.TfidfModel"]=function(){},t["gensim.models.word2vec.Vocab"]=function(){},t["gensim.models.word2vec.Word2Vec"]=function(){},t["lightgbm.sklearn.LGBMRegressor"]=function(){},t["lightgbm.sklearn.LGBMClassifier"]=function(){},t["lightgbm.basic.Booster"]=function(){},t["nolearn.lasagne.base.BatchIterator"]=function(){},t["nolearn.lasagne.base.Layers"]=function(){},t["nolearn.lasagne.base.NeuralNet"]=function(){},t["nolearn.lasagne.base.TrainSplit"]=function(){},t["nolearn.lasagne.handlers.PrintLayerInfo"]=function(){},t["nolearn.lasagne.handlers.PrintLog"]=function(){},t["sklearn.calibration._CalibratedClassifier"]=function(){},t["sklearn.calibration._SigmoidCalibration"]=function(){},t["sklearn.calibration.CalibratedClassifierCV\u200B"]=function(){},t["sklearn.compose._column_transformer.ColumnTransformer"]=function(){},t["sklearn.compose._target.TransformedTargetRegressor"]=function(){},t["sklearn.cluster._dbscan.DBSCAN"]=function(){},t["sklearn.cluster._kmeans.KMeans"]=function(){},t["sklearn.decomposition._pca.PCA"]=function(){},t["sklearn.decomposition.PCA"]=function(){},t["sklearn.decomposition.pca.PCA"]=function(){},t["sklearn.decomposition._truncated_svd.TruncatedSVD"]=function(){},t["sklearn.decomposition.truncated_svd.TruncatedSVD"]=function(){},t["sklearn.discriminant_analysis.LinearDiscriminantAnalysis"]=function(){},t["sklearn.dummy.DummyClassifier"]=function(){},t["sklearn.externals.joblib.numpy_pickle.NumpyArrayWrapper"]=t["joblib.numpy_pickle.NumpyArrayWrapper"],t["sklearn.externals.joblib.numpy_pickle.NDArrayWrapper"]=function(){},t["sklearn.ensemble._bagging.BaggingClassifier"]=function(){},t["sklearn.ensemble._forest.RandomForestRegressor"]=function(){},t["sklearn.ensemble._forest.RandomForestClassifier"]=function(){},t["sklearn.ensemble._forest.ExtraTreesClassifier"]=function(){},t["sklearn.ensemble._gb_losses.BinomialDeviance"]=function(){},t["sklearn.ensemble._gb_losses.MultinomialDeviance"]=function(){},t["sklearn.ensemble._gb.GradientBoostingClassifier"]=function(){},t["sklearn.ensemble._iforest.IsolationForest"]=function(){},t["sklearn.ensemble._voting.VotingClassifier"]=function(){},t["sklearn.ensemble.forest.RandomForestClassifier"]=function(){},t["sklearn.ensemble.forest.RandomForestRegressor"]=function(){},t["sklearn.ensemble.forest.ExtraTreesClassifier"]=function(){},t["sklearn.ensemble.gradient_boosting.BinomialDeviance"]=function(){},t["sklearn.ensemble.gradient_boosting.GradientBoostingClassifier"]=function(){},t["sklearn.ensemble.gradient_boosting.LogOddsEstimator"]=function(){},t["sklearn.ensemble.gradient_boosting.MultinomialDeviance"]=function(){},t["sklearn.ensemble.gradient_boosting.PriorProbabilityEstimator"]=function(){},t["sklearn.ensemble.weight_boosting.AdaBoostClassifier"]=function(){},t["sklearn.feature_extraction._hashing.FeatureHasher"]=function(){},t["sklearn.feature_extraction.text.CountVectorizer"]=function(){},t["sklearn.feature_extraction.text.HashingVectorizer"]=function(){},t["sklearn.feature_extraction.text.TfidfTransformer"]=function(){},t["sklearn.feature_extraction.text.TfidfVectorizer"]=function(){},t["sklearn.feature_selection._univariate_selection.SelectKBest"]=function(){},t["sklearn.feature_selection._univariate_selection.SelectPercentile"]=function(){},t["sklearn.feature_selection.univariate_selection.SelectKBest"]=function(){},t["sklearn.feature_selection.variance_threshold.VarianceThreshold"]=function(){},t["sklearn.impute._base.SimpleImputer"]=function(){},t["sklearn.impute.SimpleImputer"]=function(){},t["sklearn.linear_model._base.LinearRegression"]=function(){},t["sklearn.linear_model._coordinate_descent.ElasticNet"]=function(){},t["sklearn.linear_model.base.LinearRegression"]=function(){},t["sklearn.linear_model.sgd_fast.Hinge"]=function(){},t["sklearn.linear_model.LogisticRegression"]=function(){},t["sklearn.linear_model.logistic.LogisticRegression"]=function(){},t["sklearn.linear_model._logistic.LogisticRegression"]=function(){},t["sklearn.linear_model.LassoLars\u200B"]=function(){},t["sklearn.linear_model.ridge.Ridge"]=function(){},t["sklearn.linear_model.sgd_fast.Log"]=function(){},t["sklearn.linear_model.stochastic_gradient.SGDClassifier"]=function(){},t["sklearn.metrics.scorer._PredictScorer"]=function(){},t["sklearn.model_selection._search.GridSearchCV"]=function(){},t["sklearn.naive_bayes.BernoulliNB"]=function(){},t["sklearn.naive_bayes.ComplementNB"]=function(){},t["sklearn.naive_bayes.GaussianNB"]=function(){},t["sklearn.naive_bayes.MultinomialNB"]=function(){},t["sklearn.neighbors.classification.KNeighborsClassifier"]=function(){},t["sklearn.neighbors.dist_metrics.newObj"]=function(){},t["sklearn.neighbors.kd_tree.newObj"]=function(){},t["sklearn.neighbors.KNeighborsClassifier"]=function(){},t["sklearn.neighbors.KNeighborsRegressor"]=function(){},t["sklearn.neighbors.regression.KNeighborsRegressor"]=function(){},t["sklearn.neighbors.unsupervised.NearestNeighbors"]=function(){},t["sklearn.neural_network._multilayer_perceptron.MLPClassifier"]=function(){},t["sklearn.neural_network._multilayer_perceptron.MLPRegressor"]=function(){},t["sklearn.neural_network._stochastic_optimizers.AdamOptimizer"]=function(){},t["sklearn.neural_network._stochastic_optimizers.SGDOptimizer"]=function(){},t["sklearn.neural_network.rbm.BernoulliRBM"]=function(){},t["sklearn.neural_network.multilayer_perceptron.MLPClassifier"]=function(){},t["sklearn.neural_network.multilayer_perceptron.MLPRegressor"]=function(){},t["sklearn.neural_network.stochastic_gradient.SGDClassifier"]=function(){},t["sklearn.pipeline.Pipeline"]=function(){},t["sklearn.pipeline.FeatureUnion"]=function(){},t["sklearn.preprocessing._data.PolynomialFeatures"]=function(){},t["sklearn.preprocessing._data.RobustScaler"]=function(){},t["sklearn.preprocessing._data.StandardScaler"]=function(){},t["sklearn.preprocessing._discretization.KBinsDiscretizer"]=function(){},t["sklearn.preprocessing._encoders.OneHotEncoder"]=function(){},t["sklearn.preprocessing._function_transformer.FunctionTransformer"]=function(){},t["sklearn.preprocessing._label.LabelBinarizer"]=function(){},t["sklearn.preprocessing._label.LabelEncoder"]=function(){},t["sklearn.preprocessing.data.Binarizer"]=function(){},t["sklearn.preprocessing.data.MaxAbsScaler"]=function(){},t["sklearn.preprocessing.data.MinMaxScaler"]=function(){},t["sklearn.preprocessing.data.Normalizer"]=function(){},t["sklearn.preprocessing.data.OneHotEncoder"]=function(){},t["sklearn.preprocessing.data.PolynomialFeatures"]=function(){},t["sklearn.preprocessing.data.PowerTransformer"]=function(){},t["sklearn.preprocessing.data.RobustScaler"]=function(){},t["sklearn.preprocessing.data.QuantileTransformer"]=function(){},t["sklearn.preprocessing.data.StandardScaler"]=function(){},t["sklearn.preprocessing.imputation.Imputer"]=function(){},t["sklearn.preprocessing.label.LabelBinarizer"]=function(){},t["sklearn.preprocessing.label.LabelEncoder"]=function(){},t["sklearn.preprocessing.label.MultiLabelBinarizer"]=function(){},t["sklearn.svm._classes.SVC"]=function(){},t["sklearn.svm.classes.LinearSVC"]=function(){},t["sklearn.svm.classes.SVC"]=function(){},t["sklearn.svm.classes.SVR"]=function(){},t["sklearn.tree._classes.DecisionTreeClassifier"]=function(){},t["sklearn.tree._classes.DecisionTreeRegressor"]=function(){},t["sklearn.tree._classes.ExtraTreeClassifier"]=function(){},t["sklearn.tree._classes.ExtraTreeRegressor"]=function(){},t["sklearn.tree._tree.Tree"]=function(r,l,u){this.n_features=r,this.n_classes=l,this.n_outputs=u,this.__setstate__=function(i){this.max_depth=i.max_depth,this.node_count=i.node_count,this.nodes=i.nodes,this.values=i.values}},t["sklearn.tree.tree.DecisionTreeClassifier"]=function(){},t["sklearn.tree.tree.DecisionTreeRegressor"]=function(){},t["sklearn.tree.tree.ExtraTreeClassifier"]=function(){},t["sklearn.utils.deprecation.DeprecationDict"]=function(){},t["xgboost.compat.XGBoostLabelEncoder"]=function(){},t["xgboost.core.Booster"]=function(){},t["xgboost.sklearn.XGBClassifier"]=function(){},t["xgboost.sklearn.XGBRegressor"]=function(){},a["copy_reg._reconstructor"]=function(r,l,u){if(l=="__builtin__.object"){const i={};return sklearn.Utility.applyType(i,r),i}if(l=="__builtin__.tuple")return u;throw new sklearn.Error("Unknown base type '"+l+"'.")},a["numpy.core.multiarray.scalar"]=function(r,l){let u=l;if(typeof l=="string"||l instanceof String){u=new Uint8Array(l.length);for(let _=0;_<l.length;_++)u[_]=l.charCodeAt(_)}const i=new DataView(u.buffer,u.byteOffset,u.byteLength);switch(r.name){case"uint8":return i.getUint8(0);case"float32":return i.getFloat32(0,!0);case"float64":return i.getFloat64(0,!0);case"int8":return i.getInt8(0,!0);case"int16":return i.getInt16(0,!0);case"int32":return i.getInt32(0,!0);case"int64":return new long.Long(i.getInt32(0,!0),i.getInt32(4,!0),!1)}throw new sklearn.Error("Unknown scalar type '"+r.name+"'.")},a["numpy.ma.core._mareconstruct"]=function(r){const l={};return sklearn.Utility.applyType(l,r),l},a["numpy.random.__RandomState_ctor"]=function(){return{}},a["numpy.random._pickle.__randomstate_ctor"]=function(){return{}},a["_codecs.encode"]=function(r){return r},a["collections.defaultdict"]=function(){return{}},a["collections.OrderedDict"]=function(r){const l=new Map;if(l.__setitem__=function(u,i){l.set(u,i)},r)for(const u of r)l.__setitem__(u[0],u[1]);return l},a["__builtin__.bytearray"]=function(r,l){if(r){if(l==="latin-1"){const u=new Uint8Array(r.length);for(let i=0;i<r.length;i++)u[i]=r.charCodeAt(i);return u}throw new sklearn.Error("Unsupported bytearray encoding '"+JSON.stringify(l)+"'.")}return[]},a["__builtin__.bytes"]=function(r,l){if(r){if(l==="latin-1"){const u=new Uint8Array(r.length);for(let i=0;i<r.length;i++)u[i]=r.charCodeAt(i);return u}throw new sklearn.Error("Unsupported bytearray encoding '"+JSON.stringify(l)+"'.")}return[]},a["__builtin__.set"]=function(r){return r||[]},a["__builtin__.frozenset"]=function(r){return r||[]},a["builtins.bytearray"]=function(r){return{data:r}},a["builtins.set"]=function(r){return r||[]},a["builtins.slice"]=function(r,l,u){return{start:r,stop:l,step:u}},a["cloudpickle.cloudpickle._builtin_type"]=function(r){return r};const o=new Set,f=new Set(["sklearn","collections","__builtin__","builtins","copy_reg","gensim","joblib","xgboost","lightgbm","nolearn","numpy"]),h=(r,l)=>{const u=a[r];if(u)return u.apply(null,l);const i={};sklearn.Utility.applyType(i,r);const _=t[r];return _?_.apply(i,l):r&&!o.has(r)&&(o.add(r),f.has(r.split(".").shift())&&s(new sklearn.Error("Unknown function '"+r+"'."),!1)),i};this._data=c.load(h,null),this._data&&(this._weights=function(r){for(const l of r)if(l&&!Array.isArray(l)){const u=new Map;for(const i in l){const _=l[i];if(i!="weight_order"&&i!="lr"){if(!i||!sklearn.Utility.isTensor(_))return null;u.set(i,_)}}return u}for(const l of r)if(l&&Array.isArray(l)){const u=new Map;for(let i=0;i<l.length;i++){const _=l[i];if(!sklearn.Utility.isTensor(_,"numpy.ndarray"))return null;u.set(i.toString(),_)}return u}return null}([this._data,this._data.blobs]),this._weights&&(this._data=null))}get data(){return this._data}get weights(){return this._weights}},sklearn.Utility=class{static isTensor(e){return e&&e.__module__==="numpy"&&e.__name__==="ndarray"}static applyType(e,n){if(n){const s=n.split(".");e.__name__=s.pop(),e.__module__=s.join(".")}}},sklearn.Error=class extends Error{constructor(e){super(e),this.name="Error loading scikit-learn model."}},typeof module!="undefined"&&typeof module.exports=="object"&&(module.exports.ModelFactory=sklearn.ModelFactory);
