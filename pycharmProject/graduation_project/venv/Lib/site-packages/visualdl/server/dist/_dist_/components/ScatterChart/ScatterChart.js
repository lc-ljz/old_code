function v(l,t){var e=Object.keys(l);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(l);t&&(i=i.filter(function(r){return Object.getOwnPropertyDescriptor(l,r).enumerable})),e.push.apply(e,i)}return e}function T(l){for(var t=1;t<arguments.length;t++){var e=arguments[t]!=null?arguments[t]:{};t%2?v(Object(e),!0).forEach(function(i){o(l,i,e[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(l,Object.getOwnPropertyDescriptors(e)):v(Object(e)).forEach(function(i){Object.defineProperty(l,i,Object.getOwnPropertyDescriptor(e,i))})}return l}function o(l,t,e){return t in l?Object.defineProperty(l,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):l[t]=e,l}import*as n from"../../../web_modules/three.js";import*as g from"../../../web_modules/d3.js";import{OrbitControls as E}from"../../../web_modules/three/examples/jsm/controls/OrbitControls.js";import R from"./ScatterChartLabel.js";function I(){const l=5;return{vertexShader:`
            attribute vec3 color;
            attribute float scaleFactor;

            uniform bool sizeAttenuation;
            uniform float pointSize;

            varying vec3 vColor;

            ${n.ShaderChunk.fog_pars_vertex}

            void main() {
                vColor = color;

                vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
                gl_Position = projectionMatrix * mvPosition;

                float outputPointSize = pointSize;
                if (sizeAttenuation) {
                    outputPointSize = -pointSize / mvPosition.z;
                } else {
                    const float PI = 3.1415926535897932384626433832795;
                    const float minScale = 0.1;  // minimum scaling factor
                    const float outSpeed = 2.0;  // shrink speed when zooming out
                    const float outNorm = (1. - minScale) / atan(outSpeed);
                    const float maxScale = 15.0;  // maximum scaling factor
                    const float inSpeed = 0.02;  // enlarge speed when zooming in
                    const float zoomOffset = 0.3;  // offset zoom pivot
                    float zoom = projectionMatrix[0][0] + zoomOffset;  // zoom pivot
                    float scale = zoom < 1. ? 1. + outNorm * atan(outSpeed * (zoom - 1.)) :
                                    1. + 2. / PI * (maxScale - 1.) * atan(inSpeed * (zoom - 1.));
                    outputPointSize = pointSize * scale;
                }
                gl_PointSize = max(outputPointSize * scaleFactor, ${l.toFixed(1)});
                ${n.ShaderChunk.fog_vertex}
            }
        `,fragmentShader:`
            varying vec3 vColor;

            ${n.ShaderChunk.common}
            ${n.ShaderChunk.fog_pars_fragment}

            void main() {
                float r = distance(gl_PointCoord, vec2(0.5, 0.5));
                if (r < 0.5) {
                    gl_FragColor = vec4(vColor, 1);
                } else {
                    discard;
                }
                ${n.ShaderChunk.fog_fragment}
            }
        `}}export default class s{constructor(t,e){var i,r;o(this,"width",void 0),o(this,"height",void 0),o(this,"background","#fff"),o(this,"is3D",!0),o(this,"data",[]),o(this,"labels",[]),o(this,"container",void 0),o(this,"canvas",void 0),o(this,"scene",void 0),o(this,"renderer",void 0),o(this,"camera",void 0),o(this,"controls",void 0),o(this,"fog",void 0),o(this,"pickingTexture",void 0),o(this,"geometry",void 0),o(this,"renderMaterial",null),o(this,"pickingMaterial",null),o(this,"positions",null),o(this,"renderColors",null),o(this,"pickingColors",null),o(this,"scaleFactors",null),o(this,"axes",null),o(this,"points",null),o(this,"focusedPointIndices",[]),o(this,"hoveredPointIndices",[]),o(this,"label",void 0),o(this,"highLightPointIndices",[]),o(this,"mouseCoordinates",null),o(this,"onMouseMoveBindThis",void 0),o(this,"rotate",!1),o(this,"animationId",null),this.container=t,this.width=e.width,this.height=e.height,this.is3D=(i=e.is3D)!==null&&i!==void 0?i:this.is3D,this.background=(r=e.background)!==null&&r!==void 0?r:this.background,this.canvas=this.initCanvas(),this.container.appendChild(this.canvas),this.label=new R(this.container,{width:this.width,height:this.height}),this.scene=this.initScene(),this.camera=this.initCamera(),this.renderer=this.initRenderer(),this.controls=this.initControls(),this.fog=this.initFog(),this.pickingTexture=this.initRenderTarget(),this.geometry=this.createGeometry(),this.onMouseMoveBindThis=this.onMouseMove.bind(this),this.bindEventListeners(),this.is3D&&this.addAxes(),this.reset()}initCanvas(){const t=document.createElement("canvas");return t.width=this.width,t.height=this.height,t}initScene(){const t=new n.Scene;t.background=new n.Color(this.background);const e=new n.PointLight(16772287,1,0);return e.name="light",t.add(e),t}initCamera(){const t=new n.Vector3(0,0,0);let e;return this.is3D?(e=new n.PerspectiveCamera(s.PERSP_CAMERA_FOV_VERTICAL,this.width/this.height,s.PERSP_CAMERA_NEAR_CLIP_PLANE,s.PERSP_CAMERA_FAR_CLIP_PLANE),e.position.set(...s.PERSP_CAMERA_INIT_POSITION)):(e=new n.OrthographicCamera(-s.ORTHO_CAMERA_FRUSTUM_HALF_EXTENT,s.ORTHO_CAMERA_FRUSTUM_HALF_EXTENT,s.ORTHO_CAMERA_FRUSTUM_HALF_EXTENT,-s.ORTHO_CAMERA_FRUSTUM_HALF_EXTENT,-1e3,1e3),e.position.set(...s.ORTHO_CAMERA_INIT_POSITION),e.up=new n.Vector3(0,1,0)),e.lookAt(t),e.zoom=1,e.updateProjectionMatrix(),e}initRenderer(){var t;const e=new n.WebGLRenderer({canvas:(t=this.canvas)!==null&&t!==void 0?t:void 0,alpha:!0,premultipliedAlpha:!1,antialias:!1});return e.setClearColor(this.background,1),e.setPixelRatio(window.devicePixelRatio||1),e.setSize(this.width,this.height),e}initControls(){const t=new E(this.camera,this.renderer.domElement);return t.enableRotate=this.is3D,t.autoRotate=!1,t.rotateSpeed=s.ORBIT_MOUSE_ROTATION_SPEED,t.minDistance=s.MIN_ZOOM,t.maxDistance=s.MAX_ZOOM,t.mouseButtons.LEFT=this.is3D?n.MOUSE.ROTATE:n.MOUSE.PAN,t.reset(),t.addEventListener("start",()=>{this.stopRotate()}),t.addEventListener("change",()=>{this.render()}),t}initFog(){return new n.Fog(this.background)}initRenderTarget(){const t=new n.Vector2;this.renderer.getSize(t);const e=this.renderer.getPixelRatio(),i=new n.WebGLRenderTarget(t.width*e,t.height*e);return i.texture.minFilter=n.LinearFilter,i}createShaderUniforms(){const t=this.scene.fog;return{pointSize:{value:200/Math.log(this.data.length)/Math.log(8)/(this.is3D?1:1.5)},sizeAttenuation:{value:this.is3D},fogColor:{value:t==null?void 0:t.color},fogNear:{value:t==null?void 0:t.near},fogFar:{value:t==null?void 0:t.far}}}createGeometry(){const t=new n.BufferGeometry;return t.computeBoundingSphere(),t}setPointsPosition(t){this.geometry.setAttribute("position",new n.BufferAttribute(t,3))}setPointsColor(t){this.geometry.setAttribute("color",new n.BufferAttribute(t,3))}setPointsScaleFactor(t){this.geometry.setAttribute("scaleFactor",new n.BufferAttribute(t,1))}createRenderMaterial(){const t=this.createShaderUniforms();return new n.ShaderMaterial(T({transparent:!0,depthTest:!1,depthWrite:!1,fog:!0,blending:n.MultiplyBlending,uniforms:t},I()))}createPickingMaterial(){const t=this.createShaderUniforms();return new n.ShaderMaterial(T({transparent:!0,depthTest:!0,depthWrite:!0,fog:!1,blending:n.NormalBlending,uniforms:t},I()))}convertPointsPosition(){const t=this.data,e=g.scaleLinear(),i=g.scaleLinear();let r=null;const h=g.extent(t,(a,u)=>t[u][0]),p=g.extent(t,(a,u)=>t[u][1]),c=[-s.CUBE_LENGTH/2,s.CUBE_LENGTH/2];if(e.domain(h).range(c),i.domain(p).range(c),this.is3D){r=g.scaleLinear();const a=g.extent(t,(u,m)=>t[m][2]);r.domain(a).range(c)}const _=t.map(a=>{var u,m,O,P;return[(u=e(a[0]))!==null&&u!==void 0?u:0,(m=i(a[1]))!==null&&m!==void 0?m:0,(O=(P=r)===null||P===void 0?void 0:P(a[2]))!==null&&O!==void 0?O:0]}),f=new Float32Array(_.length*3);let d=0;return _.forEach(a=>{f[d++]=a[0],f[d++]=a[1],f[d++]=a[2]}),f}convertPointsColor(){const t=this.data.length,e=new Float32Array(t*3);let i=0;for(let r=0;r<t;r++)this.hoveredPointIndices.includes(r)?(e[i++]=s.POINT_COLOR_HOVER.r,e[i++]=s.POINT_COLOR_HOVER.g,e[i++]=s.POINT_COLOR_HOVER.b):this.focusedPointIndices.includes(r)?(e[i++]=s.POINT_COLOR_FOCUS.r,e[i++]=s.POINT_COLOR_FOCUS.g,e[i++]=s.POINT_COLOR_FOCUS.b):this.highLightPointIndices.includes(r)?(e[i++]=s.POINT_COLOR_HIGHLIGHT.r,e[i++]=s.POINT_COLOR_HIGHLIGHT.g,e[i++]=s.POINT_COLOR_HIGHLIGHT.b):(e[i++]=s.POINT_COLOR_DEFAULT.r,e[i++]=s.POINT_COLOR_DEFAULT.g,e[i++]=s.POINT_COLOR_DEFAULT.b);return e}convertPointsScaleFactor(){const t=this.data.length,e=new Float32Array(t);for(let i=0;i<t;i++)this.hoveredPointIndices.includes(i)?e[i]=s.POINT_SCALE_HOVER:this.focusedPointIndices.includes(i)?e[i]=s.POINT_SCALE_FOCUS:this.highLightPointIndices.includes(i)?e[i]=s.POINT_SCALE_HIGHLIGHT:e[i]=s.POINT_SCALE_DEFAULT;return e}convertPointsPickingColor(){const t=this.data.length,e=new Float32Array(t*3);let i=0;for(let r=0;r<t;r++){const h=new n.Color(r);e[i++]=h.r,e[i++]=h.g,e[i++]=h.b}return e}updatePointsAttribute(){this.renderColors=this.convertPointsColor(),this.setPointsColor(this.renderColors),this.scaleFactors=this.convertPointsScaleFactor(),this.setPointsScaleFactor(this.scaleFactors)}updateHoveredPoints(){if(!this.mouseCoordinates)return;const t=window.devicePixelRatio||1,e=Math.floor(this.mouseCoordinates[0]*t),i=Math.floor(this.mouseCoordinates[1]*t),r=this.data.length,h=Math.floor(t),p=Math.floor(t),c=new Uint8Array(h*p*4);this.renderer.readRenderTargetPixels(this.pickingTexture,e,this.pickingTexture.height-i,h,p,c);const _=new Uint8Array(r),f=h*p;for(let a=0;a<f;a++){const u=c[a*4]<<16|c[a*4+1]<<8|c[a*4+2];u!==16777215&&u<r&&(_[u]=1)}const d=[];for(let a=0;a<_.length;a++)_[a]===1&&d.push(a);this.hoveredPointIndices=d}updateHoveredLabels(){if(!this.camera||!this.positions)return;const t=this.focusedPointIndices.length?this.focusedPointIndices:this.hoveredPointIndices;if(!t.length){this.label.clear();return}const e=window.devicePixelRatio||1,i=this.width,r=this.height,h=t.map(p=>{var c;const _=p*3,f=new n.Vector3(this.positions[_],this.positions[_+1],this.positions[_+2]),d=new n.Vector3().copy(f).project(this.camera),a=[(d.x+1)/2*i*e,-((d.y-1)/2*r)*e];return{text:(c=this.labels[p])!==null&&c!==void 0?c:"",fontSize:40,fillColor:"#000",strokeColor:"#fff",opacity:1,x:a[0]+4,y:a[1]}});this.label.render(h)}updateLight(){const t=this.scene.getObjectByName("light"),i=this.camera.position.clone();i.x+=1,i.y+=1,t.position.set(i.x,i.y,i.z)}updateFog(){const t=this.fog;if(t.color=new n.Color(this.background),this.is3D&&this.positions){const e=this.camera.position,i=this.controls.target;let r=Number.POSITIVE_INFINITY,h=0;const p=new n.Vector3().copy(i).sub(e),c=new n.Vector3().copy(p).normalize(),_=this.positions.length/3;let f=0;const d=new n.Vector3,a=new n.Vector3;for(let m=0;m<_;m++){d.x=this.positions[f++],d.y=this.positions[f++],d.z=this.positions[f++],a.copy(d).sub(e);const O=c.dot(a);O<0||(h=O>h?O:h,r=O<r?O:r)}const u=2-Math.min(_,s.NUM_POINTS_FOG_THRESHOLD)/s.NUM_POINTS_FOG_THRESHOLD;t.near=r,t.far=h*u}else t.near=Number.POSITIVE_INFINITY,t.far=Number.POSITIVE_INFINITY;if(this.points){const e=this.points.material;e.uniforms.fogColor.value=t.color,e.uniforms.fogNear.value=t.near,e.uniforms.fogFar.value=t.far}this.scene.fog=t}bindEventListeners(){var t;(t=this.canvas)===null||t===void 0||t.addEventListener("mousemove",this.onMouseMoveBindThis)}removeEventListeners(){var t;(t=this.canvas)===null||t===void 0||t.removeEventListener("mousemove",this.onMouseMoveBindThis)}onMouseMove(t){this.mouseCoordinates=[t.offsetX,t.offsetY],this.render()}addAxes(){this.axes&&this.removeAxes(),this.axes=new n.AxesHelper,this.scene.add(this.axes)}removeAxes(){this.axes&&(this.scene.remove(this.axes),this.axes=null)}render(){this.updateLight(),this.updateFog(),this.updateHoveredPoints(),this.updateHoveredLabels(),this.updatePointsAttribute(),this.pickingMaterial&&(this.axes&&this.scene.remove(this.axes),this.points&&(this.points.material=this.pickingMaterial),this.pickingColors&&this.setPointsColor(this.pickingColors),this.renderer.setRenderTarget(this.pickingTexture),this.renderer.render(this.scene,this.camera),this.axes&&this.scene.add(this.axes),this.points&&this.renderMaterial&&(this.points.material=this.renderMaterial),this.renderColors&&this.setPointsColor(this.renderColors)),this.renderer.setRenderTarget(null),this.renderer.render(this.scene,this.camera)}startRotate(){if(this.rotate)return;this.rotate=!0,this.controls.autoRotate=!0,this.controls.autoRotateSpeed=s.ORBIT_ANIMATION_ROTATION_CYCLE_IN_SECONDS;const t=()=>{this.controls.update(),this.animationId=requestAnimationFrame(t)};t()}stopRotate(){this.rotate&&(this.rotate=!1,this.controls.autoRotate=!1,this.controls.rotateSpeed=s.ORBIT_MOUSE_ROTATION_SPEED,this.animationId!=null&&(cancelAnimationFrame(this.animationId),this.animationId=null))}reset(){this.controls.reset(),this.is3D&&!this.animationId&&this.startRotate()}setSize(t,e){if(this.width=t,this.height=e,this.is3D){const i=this.camera;i.aspect=t/e,i.updateProjectionMatrix()}this.renderer.setSize(t,e),this.label.setSize(t,e),this.pickingTexture=this.initRenderTarget(),this.controls.update()}setDimension(t){this.is3D!==t&&(this.is3D=t,this.stopRotate(),this.controls.dispose(),this.camera=this.initCamera(),this.controls=this.initControls(),t?(this.addAxes(),this.startRotate()):this.removeAxes(),this.setData(this.data))}setData(t){this.data=t,this.points&&this.scene.remove(this.points),this.positions=this.convertPointsPosition(),this.setPointsPosition(this.positions),this.pickingColors=this.convertPointsPickingColor(),this.renderMaterial=this.createRenderMaterial(),this.pickingMaterial=this.createPickingMaterial(),this.points=new n.Points(this.geometry,this.renderMaterial),this.points.frustumCulled=!1,this.scene.add(this.points),this.render()}setLabels(t){this.labels=t,this.render()}setHighLightIndices(t){this.highLightPointIndices=t,this.render()}setFocusedPointIndices(t){this.focusedPointIndices=t,this.render()}dispose(){var t,e;this.removeEventListeners(),this.label.dispose(),this.canvas&&(this.container.removeChild(this.canvas),this.canvas=null),this.renderer.dispose(),this.controls.dispose(),this.pickingTexture.dispose(),this.geometry.dispose(),(t=this.renderMaterial)===null||t===void 0||t.dispose(),(e=this.pickingMaterial)===null||e===void 0||e.dispose()}}o(s,"CUBE_LENGTH",2),o(s,"MAX_ZOOM",5*s.CUBE_LENGTH),o(s,"MIN_ZOOM",.025*s.CUBE_LENGTH),o(s,"PERSP_CAMERA_FOV_VERTICAL",70),o(s,"PERSP_CAMERA_NEAR_CLIP_PLANE",.01),o(s,"PERSP_CAMERA_FAR_CLIP_PLANE",100),o(s,"ORTHO_CAMERA_FRUSTUM_HALF_EXTENT",1.2),o(s,"ORBIT_MOUSE_ROTATION_SPEED",1),o(s,"ORBIT_ANIMATION_ROTATION_CYCLE_IN_SECONDS",2),o(s,"NUM_POINTS_FOG_THRESHOLD",5e3),o(s,"POINT_COLOR_DEFAULT",new n.Color(8289918)),o(s,"POINT_COLOR_HOVER",new n.Color(2700001)),o(s,"POINT_COLOR_HIGHLIGHT",new n.Color(2700001)),o(s,"POINT_COLOR_FOCUS",new n.Color(2700001)),o(s,"POINT_SCALE_DEFAULT",1),o(s,"POINT_SCALE_HOVER",1.2),o(s,"POINT_SCALE_HIGHLIGHT",1),o(s,"POINT_SCALE_FOCUS",1.2),o(s,"PERSP_CAMERA_INIT_POSITION",[.45,.9,1.6]),o(s,"ORTHO_CAMERA_INIT_POSITION",[0,0,4]);
