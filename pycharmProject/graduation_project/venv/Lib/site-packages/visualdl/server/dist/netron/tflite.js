var tflite=tflite||{},base=base||require("./base"),flatbuffers=flatbuffers||require("./flatbuffers"),long=long||{Long:require("long")};tflite.ModelFactory=class{match(t){const e=t.identifier.split(".").pop().toLowerCase();if(["tflite","lite","tfl","bin","pb","model","tmfile","h5"].indexOf(e)!==-1){const n=t.buffer,i="TFL3";if(n&&n.length>8&&n.subarray(4,8).every((s,r)=>s===i.charCodeAt(r)))return!0}if(e==="json"){const n=t.text;if(n.indexOf('"subgraphs"',0)!==-1&&n.indexOf('"operator_codes"',0)!==-1)return!0}return!1}open(t,e){return e.require("./tflite-schema").then(()=>(tflite.schema=flatbuffers.get("tflite").tflite,tflite.Metadata.open(e).then(n=>{const i=t.identifier;try{switch(i.split(".").pop().toLowerCase()){default:{const s=new flatbuffers.Reader(t.buffer);if(!tflite.schema.Model.identifier(s))throw new tflite.Error("File format is not tflite.Model.");const r=tflite.schema.Model.create(s);return new tflite.Model(n,r)}case"json":{const s=new flatbuffers.TextReader(t.text),r=tflite.schema.Model.createText(s);return new tflite.Model(n,r)}}}catch(s){const r=s&&s.message?s.message:s.toString();throw new tflite.Error(r.replace(/\.$/,"")+" in '"+i+"'.")}})))}},tflite.Model=class{constructor(t,e){this._graphs=[],this._format="TensorFlow Lite",this._format=this._format+" v"+e.version.toString(),this._description=e.description||"";const n=[],i={};for(const o of Object.keys(tflite.schema.BuiltinOperator))i[tflite.schema.BuiltinOperator[o]]=tflite.Utility.type(o);for(let o=0;o<e.operator_codes.length;o++){const l=e.operator_codes[o],m=l.builtin_code,h=l.version,d=m===tflite.schema.BuiltinOperator.CUSTOM,a=d?l.custom_code:i[m];if(!a)throw new tflite.Error("Invalid built-in code '"+m.toString()+"' at '"+o.toString()+"'.");n.push(d?{name:a,version:h,custom:!0}:{name:a,version:h})}let s=null;for(const o of e.metadata)switch(o.name){case"min_runtime_version":{const l=e.buffers[o.buffer].data;this._runtime=l?new TextDecoder().decode(l):void 0;break}case"TFLITE_METADATA":{const l=e.buffers[o.buffer].data||new Uint8Array(0),m=new flatbuffers.Reader(l);tflite.schema.ModelMetadata.identifier(m)&&(s=tflite.schema.ModelMetadata.create(m),this._name=s.name||"",this._version=s.version||"",this._description=s.description?[this.description,s.description].join(" "):this._description,this._author=s.author||"",this._license=s.license||"");break}}const r=e.subgraphs,c=s?s.subgraph_metadata:null;for(let o=0;o<r.length;o++){const l=r[o],m=r.length>1?o.toString():"",h=c&&o<c.length?c[o]:null;this._graphs.push(new tflite.Graph(t,l,h,m,n,e))}}get format(){return this._format}get runtime(){return this._runtime}get name(){return this._name}get version(){return this._version}get description(){return this._description}get author(){return this._author}get license(){return this._license}get graphs(){return this._graphs}},tflite.Graph=class{constructor(t,e,n,i,s,r){this._nodes=[],this._inputs=[],this._outputs=[],this._name=e.name||i;const c=[],o=[];for(let a=0;a<e.tensors.length;a++){const u=e.tensors[a],p=r.buffers[u.buffer],_=u.is_variable,g=p.data,f=g&&g.length>0||_?new tflite.Tensor(a,u,p,_):null;c.push(new tflite.Argument(a,u,f)),o.push(u.name)}const l=e.operators;for(let a=0;a<e.operators.length;a++){const u=l[a],p=u.opcode_index,_=p<s.length?s[p]:{name:"("+p.toString()+")"};this._nodes.push(new tflite.Node(t,u,_,a.toString(),c))}const m=(a,u)=>{if(u){const p=u.description;p&&(a.description=p);const _=u.content;if(a.type&&_){let g=null;const f=_.content_properties;if(f instanceof tflite.schema.FeatureProperties)g="Feature";else if(f instanceof tflite.schema.ImageProperties)switch(g="Image",f.color_space){case 1:g+="(RGB)";break;case 2:g+="(Grayscale)"}else f instanceof tflite.schema.BoundingBoxProperties&&(g="BoundingBox");g&&(a.type.denotation=g)}}},h=e.inputs;for(let a=0;a<h.length;a++){const u=h[a],p=c[u];n&&a<n.input_tensor_metadata.length&&m(p,n.input_tensor_metadata[a]),this._inputs.push(new tflite.Parameter(o[u],!0,[p]))}const d=e.outputs;for(let a=0;a<d.length;a++){const u=d[a],p=c[u];n&&a<n.output_tensor_metadata.length&&m(p,n.output_tensor_metadata[a]),this._outputs.push(new tflite.Parameter(o[u],!0,[p]))}}get name(){return this._name}get groups(){return!1}get inputs(){return this._inputs}get outputs(){return this._outputs}get nodes(){return this._nodes}},tflite.Node=class{constructor(t,e,n,i,s){if(this._metadata=t,this._location=i,this._type=n,this._inputs=[],this._outputs=[],this._attributes=[],e){let r=[],c=[];r=Array.from(e.inputs||new Int32Array(0)),c=Array.from(e.outputs||new Int32Array(0));const o=this._metadata.type(this.type);let l=0;for(;l<r.length;){let h=1,d=null,a=!0;const u=[];if(o&&o.inputs&&l<o.inputs.length){const _=o.inputs[l];d=_.name,_.option=="variadic"&&(h=r.length-l),Object.prototype.hasOwnProperty.call(_,"visible")&&!_.visible&&(a=!1)}const p=r.slice(l,l+h);for(let _=0;_<p.length;_++)p[_]!=-1&&u.push(s[p[_]]);l+=h,d=d||l.toString(),this._inputs.push(new tflite.Parameter(d,a,u))}for(let h=0;h<c.length;h++){const d=s[c[h]];let a=h.toString();if(o&&o.outputs&&h<o.outputs.length){const u=o.outputs[h];!u||u.option&&u.opcodeIndex=="variadic"||!u.name||(a=u.name)}this._outputs.push(new tflite.Parameter(a,!0,[d]))}if(n.custom&&e.custom_options.length>0){const h=t.attribute(this.type,"custom");this._attributes.push(new tflite.Attribute(h,"custom",Array.from(e.custom_options)))}const m=e.builtin_options;if(m)for(const h of Object.keys(m)){const d=m[h];if(h==="fused_activation_function"&&d!==0){const u={1:"Relu",2:"ReluN1To1",3:"Relu6",4:"Tanh",5:"SignBit"};if(!u[d])throw new tflite.Error("Unknown activation funtion index '"+JSON.stringify(d)+"'.");const p=u[d];this._chain=[new tflite.Node(t,null,{name:p},null,[])]}const a=t.attribute(this.type,h);this._attributes.push(new tflite.Attribute(a,h,d))}}}get type(){return this._type.name}get name(){return""}get location(){return this._location}get domain(){return null}get metadata(){return this._type.custom?{name:this.type,category:"custom"}:this._metadata.type(this.type)}get group(){return null}get inputs(){return this._inputs}get outputs(){return this._outputs}get chain(){return this._chain}get attributes(){return this._attributes}},tflite.Attribute=class{constructor(t,e,n){if(this._type=null,this._name=e,this._value=n,this._name=="fused_activation_function"&&(this._visible=!1),t){if(t.type&&(this._type=t.type),this._type)switch(this._type){case"shape":this._value=new tflite.TensorShape(n);break;case"TensorType":this._value=tflite.Utility.dataType(this._value);break;default:this._value=tflite.Utility.enum(this._type,this._value)}Object.prototype.hasOwnProperty.call(t,"visible")&&!t.visible?this._visible=!1:Object.prototype.hasOwnProperty.call(t,"default")&&(typeof(n=this._value)=="function"&&(n=n()),n==t.default&&(this._visible=!1))}}get name(){return this._name}get type(){return this._type}get value(){return this._value}get visible(){return this._visible!=0}},tflite.Parameter=class{constructor(t,e,n){this._name=t,this._visible=e,this._arguments=n}get name(){return this._name}get visible(){return this._visible}get arguments(){return this._arguments}},tflite.Argument=class{constructor(t,e,n){this._location=t.toString(),this._type=new tflite.TensorType(e),this._initializer=n,this._name=e.name;const i=e.quantization;if(i){let s="q";const r=i.scale.length==1?i.scale[0]:0,c=i.zero_point.length==1?i.zero_point[0]:0;r==0&&c==0||(s=r.toString()+" * "+(c==0?"q":"(q - "+c.toString()+")")),i.min.length==1&&(s=i.min[0].toString()+" \u2264 "+s),i.max.length==1&&(s=s+" \u2264 "+i.max[0].toString()),s!="q"&&(this._quantization=s)}}get name(){return this._name}get location(){return this._location}get type(){return this._type}get quantization(){return this._quantization}set description(t){this._description=t}get description(){return this._description}get initializer(){return this._initializer}},tflite.Tensor=class{constructor(t,e,n,i){this._location=t.toString(),this._type=new tflite.TensorType(e),this._is_variable=i,this._name=e.name,this._data=n.data.slice(0)}get kind(){return this._is_variable?"Variable":""}get name(){return this._name}get location(){return this._location}get type(){return this._type}get state(){return this._context().state}get value(){const t=this._context();return t.state?null:(t.limit=Number.MAX_SAFE_INTEGER,this._decode(t,0))}toString(){const t=this._context();if(t.state)return"";t.limit=1e4;const e=this._decode(t,0);return JSON.stringify(e,null,4)}_context(){const t={state:null,index:0,count:0};if(this._data==null||this._data.length===0)return t.state="Tensor data is empty.",t;if(t.dataType=this._type.dataType,t.shape=this._type.shape.dimensions,t.data=new DataView(this._data.buffer,this._data.byteOffset,this._data.byteLength),this._type.dataType=="string"){let e=0;const n=t.data.getInt32(0,!0);e+=4;const i=[];for(let c=0;c<n;c++)i.push(t.data.getInt32(e,!0)),e+=4;i.push(this._data.length);const s=[],r=new TextDecoder("utf-8");for(let c=0;c<n;c++){const o=this._data.subarray(i[c],i[c+1]);s.push(r.decode(o))}t.data=s}return t}_decode(t,e){const n=t.shape.length==0?[1]:t.shape,i=n[e],s=[];if(e==n.length-1)for(let r=0;r<i;r++){if(t.count>t.limit)return s.push("..."),s;switch(t.dataType){case"uint8":s.push(t.data.getUint8(t.index)),t.index+=1,t.count++;break;case"int8":s.push(t.data.getInt8(t.index)),t.index+=1,t.count++;break;case"int16":s.push(t.data.getInt16(t.index)),t.index+=2,t.count++;break;case"int32":s.push(t.data.getInt32(t.index,!0)),t.index+=4,t.count++;break;case"int64":s.push(new long.Long(t.data.getUint32(t.index,!0),t.data.getUint32(t.index+4,!0),!1)),t.index+=8,t.count++;break;case"float16":s.push(t.data.getFloat16(t.index,!0)),t.index+=2,t.count++;break;case"float32":s.push(t.data.getFloat32(t.index,!0)),t.index+=4,t.count++;break;case"float64":s.push(t.data.getFloat64(t.index,!0)),t.index+=8,t.count++;break;case"string":s.push(t.data[t.index++]),t.count++}}else for(let r=0;r<i;r++){if(t.count>t.limit)return s.push("..."),s;s.push(this._decode(t,e+1))}return t.shape.length==0?s[0]:s}},tflite.TensorType=class{constructor(t){this._dataType=tflite.Utility.dataType(t.type),this._shape=new tflite.TensorShape(Array.from(t.shape||[]))}get dataType(){return this._dataType}get shape(){return this._shape}set denotation(t){this._denotation=t}get denotation(){return this._denotation}toString(){return this.dataType+this._shape.toString()}},tflite.TensorShape=class{constructor(t){this._dimensions=t}get dimensions(){return this._dimensions}toString(){return this._dimensions&&this._dimensions.length!=0?"["+this._dimensions.map(t=>t.toString()).join(",")+"]":""}},tflite.Metadata=class{static open(t){return tflite.Metadata._metadata?Promise.resolve(tflite.Metadata._metadata):t.request(null,"tflite-metadata.json","utf-8").then(e=>(tflite.Metadata._metadata=new tflite.Metadata(e),tflite.Metadata._metadata)).catch(()=>(tflite.Metadata._metadata=new tflite.Metadata(null),tflite.Metadata._metadata))}constructor(t){if(this._map=new Map,t){const e=JSON.parse(t);if(e)for(const n of e)n.schema.name=n.name,this._map.set(n.name,n.schema)}}type(t){return this._map.has(t)?this._map.get(t):null}attribute(t,e){const n=this.type(t);if(n){let i=n.attributeMap;if(!i){if(i={},n.attributes)for(const r of n.attributes)i[r.name]=r;n.attributeMap=i}const s=i[e];if(s)return s}return null}},tflite.Utility=class{static dataType(t){if(!tflite.Utility._tensorTypeMap){tflite.Utility._tensorTypeMap=new Map;for(const e of Object.keys(tflite.schema.TensorType))tflite.Utility._tensorTypeMap.set(tflite.schema.TensorType[e],e.toLowerCase());tflite.Utility._tensorTypeMap.set(6,"boolean")}return tflite.Utility._tensorTypeMap.has(t)?tflite.Utility._tensorTypeMap.get(t):"?"}static enum(t,e){const n=t&&tflite.schema?tflite.schema[t]:void 0;if(n){if(tflite.Utility._enumKeyMap=tflite.Utility._enumKeyMap||new Map,!tflite.Utility._enumKeyMap.has(t)){const s=new Map;for(const r of Object.keys(n))s.set(n[r],r);tflite.Utility._enumKeyMap.set(t,s)}const i=tflite.Utility._enumKeyMap.get(t);if(i.has(e))return i.get(e)}return e}static type(t){const e=new Set(["2D","LSH","SVDF","RNN","L2","LSTM"]);return t.split("_").map(n=>n.length<1||e.has(n)?n:n[0]+n.substring(1).toLowerCase()).join("")}},tflite.Error=class extends Error{constructor(t){super(t),this.name="Error loading TensorFlow Lite model."}},typeof module!="undefined"&&typeof module.exports=="object"&&(module.exports.ModelFactory=tflite.ModelFactory);
